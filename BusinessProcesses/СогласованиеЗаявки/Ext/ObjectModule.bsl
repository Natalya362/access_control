Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)        
	
    Сообщить("Процесс СогласованиеЗаявки стартовал с заявкой: " + Заявка + ", Тип: " + ТипЗнч(Заявка)); 
	Прерывание = Ложь; // Инициализация флага
	
КонецПроцедуры

Процедура ДоступВРежимПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
    Сообщить("Проверка условия ДоступВРежим, Заявка: " + Заявка);
    // Проверяем, является ли помещение режимным
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ЗаявкаНаПропуск.РежимноеПомещение КАК РежимноеПомещение
        |ИЗ
        |   Документ.ЗаявкаНаПропуск КАК ЗаявкаНаПропуск
        |ГДЕ
        |   ЗаявкаНаПропуск.Ссылка = &Заявка
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ЗаявкаНаВъездТС.РежимноеПомещение
        |ИЗ
        |   Документ.ЗаявкаНаВъездТС КАК ЗаявкаНаВъездТС
        |ГДЕ
        |   ЗаявкаНаВъездТС.Ссылка = &Заявка";
    Запрос.УстановитьПараметр("Заявка", Заявка);
    РезультатЗапроса = Запрос.Выполнить();
    Если НЕ РезультатЗапроса.Пустой() Тогда
        Выборка = РезультатЗапроса.Выбрать();
        Выборка.Следующий();
        Результат = Выборка.РежимноеПомещение; // Истина, если доступ в режимное помещение нужен
    Иначе
        Результат = Ложь; 
    КонецЕсли;
    Сообщить("Результат проверки ДоступВРежим: " + Результат);
КонецПроцедуры  

Процедура СогласованиеДиректоромДепартаментаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Прерывание Тогда
        СтандартнаяОбработка = Ложь;
        Сообщить("Создание задач для СогласованиеДиректоромДепартамента отменено из-за прерывания процесса.");
        Возврат;
    КонецЕсли;

    // Убедимся, что Предмет передаётся
    Для Каждого Задача Из ФормируемыеЗадачи Цикл
        Задача.Предмет = Заявка; // Устанавливаем Предмет как Заявка бизнес-процесса
        Задача.РольИсполнителя = Справочники.РолиИсполнителей.ДиректорДепартамента;
	КонецЦикла;
	
КонецПроцедуры

Процедура СогласованиеДиректоромДепартаментаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	 Попытка
        Если НЕ ЗначениеЗаполнено(Заявка) Тогда
            Сообщить("Заявка не указана в бизнес-процессе.");
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        ЗаявкаОбъект = Заявка.ПолучитьОбъект();
        Если ЗаявкаОбъект = Неопределено Тогда
            Сообщить("Не удалось получить объект заявки: " + Заявка);
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        // Используем правильное поле СтатусЗаявки
        ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.Согласована;
        // Устанавливаем роль исполнителя, если она не заполнена
        Если Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
            ЗадачаОбъект = Задача.ПолучитьОбъект();
            ЗадачаОбъект.РольИсполнителя = Справочники.РолиИсполнителей.ДиректорДепартамента;
            ЗадачаОбъект.Записать();
        КонецЕсли;
        ДобавитьВИсториюПроцесса(ЗаявкаОбъект, ТочкаМаршрутаБизнесПроцесса, Задача);
        ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
        Сообщить("Заявка " + Заявка + " согласована Директором департамента.");

    Исключение
        Сообщить("Ошибка при выполнении точки СогласованиеДиректоромДепартамента для заявки " + Заявка + ": " + ОписаниеОшибки());
        Отказ = Истина;
    КонецПопытки;	
КонецПроцедуры   

Процедура СогласованиеНачальникомБюроПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Прерывание Тогда
        СтандартнаяОбработка = Ложь;
        Сообщить("Создание задач для СогласованиеНачальникомБюро отменено из-за прерывания процесса.");
        Возврат;
    КонецЕсли;

    Для Каждого Задача Из ФормируемыеЗадачи Цикл
        Задача.Предмет = Заявка;
        Задача.РольИсполнителя = Справочники.РолиИсполнителей.НачальникБюро;
    КонецЦикла; 
	
КонецПроцедуры

Процедура СогласованиеНачальникомБюроПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Попытка
        Если НЕ ЗначениеЗаполнено(Заявка) Тогда
            Сообщить("Заявка не указана в бизнес-процессе.");
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        ЗаявкаОбъект = Заявка.ПолучитьОбъект();
        Если ЗаявкаОбъект = Неопределено Тогда
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        // Используем правильное поле СтатусЗаявки
        ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.Согласована;
        // Устанавливаем роль исполнителя, если она не заполнена
        Если Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
            ЗадачаОбъект = Задача.ПолучитьОбъект();
            ЗадачаОбъект.РольИсполнителя = Справочники.РолиИсполнителей.НачальникБюро;
            ЗадачаОбъект.Записать();
        КонецЕсли;
        ДобавитьВИсториюПроцесса(ЗаявкаОбъект, ТочкаМаршрутаБизнесПроцесса, Задача);
        ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
        Сообщить("Заявка " + Заявка + " согласована Начальником бюро.");

    Исключение
        Сообщить("Ошибка при выполнении точки СогласованиеНачальникомБюро для заявки " + Заявка + ": " + ОписаниеОшибки());
        Отказ = Истина;
    КонецПопытки;	
КонецПроцедуры 

Процедура ПередЗаписью(Отказ) 
	
    Сообщить("Вход в ПередЗаписью, Прерывание: " + Прерывание + ", Завершен: " + Завершен);
    Если Прерывание И НЕ Завершен Тогда
        Сообщить("Обработка прерывания бизнес-процесса: " + Ссылка);
        ЗавершитьВсеЗадачи();
        ЭтотОбъект.Завершен = Истина;
        ЭтотОбъект.ДатаЗавершения = ТекущаяДатаСеанса();
        Сообщить("Бизнес-процесс завершён из-за прерывания.");
    КонецЕсли; 
    Сообщить("Выход из ПередЗаписью, Завершен: " + Завершен);
	
КонецПроцедуры 

Процедура ЗавершитьВсеЗадачи()
	
	Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = 
            "ВЫБРАТЬ
            |   ЗадачаИсполнителя.Ссылка
            |ИЗ
            |   Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
            |ГДЕ
            |   ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
            |   И НЕ ЗадачаИсполнителя.Выполнена";
        Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
        РезультатЗапроса = Запрос.Выполнить();
        
        Если НЕ РезультатЗапроса.Пустой() Тогда
            Выборка = РезультатЗапроса.Выбрать();
            Пока Выборка.Следующий() Цикл
                ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
                ЗадачаОбъект.Отменена = Истина;
                ЗадачаОбъект.РезультатВыполнения = "Отменено из-за прерывания процесса";
                ЗадачаОбъект.ДатаВыполнения = ТекущаяДатаСеанса();
                ЗадачаОбъект.Выполнена = Истина;
                ЗадачаОбъект.Статус = Перечисления.СтатусыЗадач.Готово;
                УстановитьПривилегированныйРежим(Истина);
                ЗадачаОбъект.Записать();
                ЗадачаОбъект.ВыполнитьЗадачу();
                УстановитьПривилегированныйРежим(Ложь);
                Сообщить("Задача " + ЗадачаОбъект.Ссылка + " отменена и завершена.");
            КонецЦикла;
        КонецЕсли;
    Исключение
        Сообщить("Ошибка при завершении задач: " + ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры  

Функция ОпределитьТипЗаявки(Заявка)
	
	Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   1 КАК Поле
        |ИЗ
        |   Документ.ЗаявкаНаПропуск КАК ЗаявкаНаПропуск
        |ГДЕ
        |   ЗаявкаНаПропуск.Ссылка = &Заявка
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ ПЕРВЫЕ 1
        |   0
        |ИЗ
        |   Документ.ЗаявкаНаВъездТС КАК ЗаявкаНаВъездТС
        |ГДЕ
        |   ЗаявкаНаВъездТС.Ссылка = &Заявка";
    Запрос.УстановитьПараметр("Заявка", Заявка);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    Если Выборка.Поле = 1 Тогда
        Возврат "ЗаявкаНаПропуск";
    Иначе
        Возврат "ЗаявкаНаВъездТС";
	КонецЕсли; 
	
КонецФункции

Процедура ВариантВыдачаПропускаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	// Проверяем, был ли уже выбран вариант
    Если ЗначениеЗаполнено(ЭтотОбъект.ВыбранныйВариант) Тогда
        Сообщить("Вариант уже выбран ранее: " + ЭтотОбъект.ВыбранныйВариант);
        Для Каждого Вариант Из ТочкаВыбораВарианта.Варианты Цикл
            Попытка
                Если Вариант.Наименование = ЭтотОбъект.ВыбранныйВариант Тогда
                    Результат = Вариант;
                    Прервать;
                КонецЕсли;
            Исключение
                Сообщить("Не удалось проверить наименование варианта: " + ОписаниеОшибки());
            КонецПопытки;
        КонецЦикла;
        Если Результат <> Неопределено Тогда
            Сообщить("Выбран ранее сохранённый вариант: " + Строка(Результат));
            Возврат;
        КонецЕсли;
    КонецЕсли;

    ТипЗаявки = ОпределитьТипЗаявки(Заявка);

    // Логика выбора
    Если ТипЗаявки = "ЗаявкаНаПропуск" Тогда
        Результат = ТочкаВыбораВарианта.Варианты[0];
        ЭтотОбъект.ВыбранныйВариант = "Вариант: Выдача пропуска"; // Сохраняем условное имя
    ИначеЕсли ТипЗаявки = "ЗаявкаНаВъездТС" Тогда
        Результат = ТочкаВыбораВарианта.Варианты[1];
        ЭтотОбъект.ВыбранныйВариант = "Вариант: Выдача пропуска на ТС";
    Иначе
        Сообщить("Не удалось определить тип заявки: " + ТипЗаявки + ". Процесс будет завершен.");
        ЭтотОбъект.Завершен = Истина;
        Записать();
        Результат = Неопределено;
        Возврат;
    КонецЕсли;

    Если Результат = Неопределено Тогда
        Сообщить("Не удалось выбрать вариант маршрута для типа заявки: " + ТипЗаявки);
        ЭтотОбъект.Завершен = Истина;
        Записать();
        Возврат;
    КонецЕсли;

    Сообщить("Выбран вариант выдачи: " + Строка(Результат));
	
	ЭтотОбъект.Записать(); // Сохраняем выбранный вариант
КонецПроцедуры

Процедура ВыдачаПропускаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Прерывание Тогда
        СтандартнаяОбработка = Ложь;
        Сообщить("Создание задач для ВыдачаПропуска отменено из-за прерывания процесса.");
        Возврат;
    КонецЕсли;

    Для Каждого Задача Из ФормируемыеЗадачи Цикл
        Задача.Предмет = Заявка;
        Задача.РольИсполнителя = Справочники.РолиИсполнителей.СотрудникБюро;
	КонецЦикла;

КонецПроцедуры

Процедура ВыдачаПропускаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Попытка
        Если НЕ ЗначениеЗаполнено(Заявка) Тогда
            Сообщить("Заявка не указана в бизнес-процессе.");
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        ЗаявкаОбъект = Заявка.ПолучитьОбъект();
        Если ЗаявкаОбъект = Неопределено Тогда
            Сообщить("Не удалось получить объект заявки: " + Заявка);
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        ЭтотОбъект.Статус = "ВыдачаПропуска"; 
        ЭтотОбъект.Завершен = Истина;
        ЭтотОбъект.Записать();

        ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.ВыдачаПропуска; 
        Если Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
            ЗадачаОбъект = Задача.ПолучитьОбъект();
            ЗадачаОбъект.РольИсполнителя = Справочники.РолиИсполнителей.СотрудникБюро;
            ЗадачаОбъект.Записать();
        КонецЕсли;

        ДобавитьВИсториюПроцесса(ЗаявкаОбъект, ТочкаМаршрутаБизнесПроцесса, Задача);
        УстановитьПривилегированныйРежим(Истина);
        ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
        УстановитьПривилегированныйРежим(Ложь);

    Исключение
        Сообщить("Ошибка при выполнении точки ВыдачаПропуска: " + ОписаниеОшибки());
        Отказ = Истина;
	КонецПопытки;

КонецПроцедуры  

Процедура ВыдачаПропускаНаТСПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Прерывание Тогда
        СтандартнаяОбработка = Ложь;
        Сообщить("Создание задач для ВыдачаПропускаНаТС отменено из-за прерывания процесса.");
        Возврат;
    КонецЕсли;

    Для Каждого Задача Из ФормируемыеЗадачи Цикл
        Задача.Предмет = Заявка;
        Задача.РольИсполнителя = Справочники.РолиИсполнителей.СотрудникБюро;
    КонецЦикла;
	
КонецПроцедуры

Процедура ВыдачаПропускаНаТСПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Попытка
        Если НЕ ЗначениеЗаполнено(Заявка) Тогда
            Сообщить("Заявка не указана в бизнес-процессе.");
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        ЗаявкаОбъект = Заявка.ПолучитьОбъект();
        Если ЗаявкаОбъект = Неопределено Тогда
            Сообщить("Не удалось получить объект заявки: " + Заявка);
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        ЭтотОбъект.Статус = "ВыдачаПропускаНаТС";
        ЭтотОбъект.Завершен = Истина; 
        ЭтотОбъект.Записать();

        ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.ВыдачаПропускаТС;
        Если Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
            ЗадачаОбъект = Задача.ПолучитьОбъект();
            ЗадачаОбъект.РольИсполнителя = Справочники.РолиИсполнителей.СотрудникБюро;
            ЗадачаОбъект.Записать();
        КонецЕсли;

        ДобавитьВИсториюПроцесса(ЗаявкаОбъект, ТочкаМаршрутаБизнесПроцесса, Задача);
        УстановитьПривилегированныйРежим(Истина);
        ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
        УстановитьПривилегированныйРежим(Ложь);

        Сообщить("Процесс завершен после выдачи пропуска на ТС.");

    Исключение
        Сообщить("Ошибка при выполнении точки ВыдачаПропускаНаТС: " + ОписаниеОшибки());
        Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
    Если Задача.Выполнена Тогда
        Этап = Строка(Задача.ТочкаМаршрута);
        РольИсполнителя = Строка(Задача.РольИсполнителя);
        РезультатЗадачи = ?(ЗначениеЗаполнено(Задача.РезультатВыполнения), Задача.РезультатВыполнения, "Выполнено");
        Комментарий = ?(ЗначениеЗаполнено(Задача.Комментарий), Задача.Комментарий, "");
        ДатаВыполнения = ?(ЗначениеЗаполнено(Задача.ДатаВыполнения), Задача.ДатаВыполнения, ТекущаяДатаСеанса());
        
        Попытка
            ДокументОбъект = Заявка.ПолучитьОбъект();
            НоваяСтрока = ДокументОбъект.ИсторияПроцесса.Добавить();
            НоваяСтрока.Этап = Этап;
            НоваяСтрока.РольИсполнителя = РольИсполнителя;
            НоваяСтрока.Результат = РезультатЗадачи;
            НоваяСтрока.ДатаВыполнения = ДатаВыполнения;
            НоваяСтрока.Комментарий = Комментарий;
            УстановитьПривилегированныйРежим(Истина);
            ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
            УстановитьПривилегированныйРежим(Ложь);
            Сообщить("Добавлена запись в историю: Этап = " + Этап + ", Результат = " + РезультатЗадачи);
        Исключение
            Сообщить("Ошибка при обновлении истории: " + ОписаниеОшибки());
        КонецПопытки;
        
        УстановитьСтатусДокумента(Этап, РезультатЗадачи);
        Записать();
    КонецЕсли;
КонецПроцедуры

Процедура УстановитьСтатусДокумента(Этап, Результат)
    // Устанавливаем статус документа в зависимости от этапа и результата
    Попытка
        ДокументОбъект = Заявка.ПолучитьОбъект();
        
        // Для этапов согласования
        Если Этап = "СогласованиеДиректоромДепартамента" Или Этап = "СогласованиеНачальникомБюро" Тогда
            Если Результат = "Согласовано" Тогда
                ДокументОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.Согласована;
            КонецЕсли;
        // Для этапа выдачи пропуска
        ИначеЕсли Этап = "ВыдачаПропуска" Тогда
            Если Результат = "Выполнено" Или Результат = "Выдан" Тогда
                ДокументОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.ВыдачаПропуска;
            КонецЕсли;
        ИначеЕсли Этап = "ВыдачаПропускаНаТС" Тогда
            Если Результат = "Выполнено" Или Результат = "Выдан" Тогда
                ДокументОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.ВыдачаПропускаТС;
            КонецЕсли;
        КонецЕсли;    
        
        УстановитьПривилегированныйРежим(Истина);
        ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
        УстановитьПривилегированныйРежим(Ложь);
        Сообщить("Установлен статус документа: " + ДокументОбъект.СтатусЗаявки);
    Исключение   
        Сообщить("Ошибка при установке статуса документа: " + ОписаниеОшибки());
    КонецПопытки; 
КонецПроцедуры

Процедура ДобавитьВИсториюПроцесса(ЗаявкаОбъект, ТочкаМаршрута, Задача)
	
	НоваяСтрока = ЗаявкаОбъект.ИсторияПроцесса.Добавить();
    НоваяСтрока.Этап = Строка(ТочкаМаршрута);
    НоваяСтрока.ДатаВыполнения = ?(ЗначениеЗаполнено(Задача.ДатаВыполнения), Задача.ДатаВыполнения, ТекущаяДатаСеанса());
    НоваяСтрока.РольИсполнителя = Задача.РольИсполнителя;
    
    // Устанавливаем результат в зависимости от выполнения задачи
    Если Задача.РезультатВыполнения = "Отклонить" Тогда
        НоваяСтрока.Результат = "Отклонена";
    ИначеЕсли Задача.РезультатВыполнения = "Согласовано" Тогда
        НоваяСтрока.Результат = "Согласована";
    Иначе
        НоваяСтрока.Результат = ?(ЗначениеЗаполнено(Задача.РезультатВыполнения), Задача.РезультатВыполнения, "Выполнено");
    КонецЕсли;
    
    НоваяСтрока.Комментарий = ?(ЗначениеЗаполнено(Задача.Комментарий), Задача.Комментарий, "");
    НоваяСтрока.СрокВыполнения = Задача.СрокВыполнения;
    
    // Принудительная запись изменений
    УстановитьПривилегированныйРежим(Истина);
    ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
    УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ОбновитьЗаписьВИстории(Этап, РольИсполнителя, Результат, ДатаВыполнения, Комментарий, СрокВыполнения)
    // Обновление существующей записи в табличной части ИсторияПроцесса
    Попытка
        ДокументОбъект = Заявка.ПолучитьОбъект();
        Для Каждого Строка Из ДокументОбъект.ИсторияПроцесса Цикл
            Если Строка.Этап = Этап И Строка.РольИсполнителя = РольИсполнителя И Не ЗначениеЗаполнено(Строка.Результат) Тогда
                Строка.Результат = Результат;
                Строка.ДатаВыполнения = ДатаВыполнения;
                Строка.Комментарий = Комментарий;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        УстановитьПривилегированныйРежим(Истина);
        ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
        УстановитьПривилегированныйРежим(Ложь);
        Сообщить("Обновлена запись в истории: Этап = " + Этап + ", Роль = " + РольИсполнителя + ", Результат = " + Результат);
    Исключение
        Сообщить("Ошибка при обновлении истории процесса: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры

Процедура ЗавершитьБизнесПроцесс() 
	
    Попытка
        ЭтотОбъект.Завершен = Истина;
        ЭтотОбъект.ДатаЗавершения = ТекущаяДатаСеанса();
        УстановитьПривилегированныйРежим(Истина);
        ЭтотОбъект.Записать();
        УстановитьПривилегированныйРежим(Ложь);
        Сообщить("Бизнес-процесс завершен.");
    Исключение
        Сообщить("Ошибка при завершении: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
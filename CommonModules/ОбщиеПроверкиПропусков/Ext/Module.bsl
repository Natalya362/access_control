// Проверяет, является ли пропуск действующим
Функция ПропускДействителен(Пропуск, ДатаПроверки, СообщениеОбОшибке = "") Экспорт
    СтатусВыдан = Справочники.СтатусыПропусков.НайтиПоНаименованию("Выдан", Истина);
    Если Не ЗначениеЗаполнено(СтатусВыдан) Тогда
        СообщениеОбОшибке = "Статус 'Выдан' не найден в справочнике СтатусыПропусков!";
        Возврат Ложь;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(Пропуск) Тогда
        СообщениеОбОшибке = "Пропуск не заполнен!";
        Возврат Ложь;
    КонецЕсли;
    
    Если ТипЗнч(Пропуск) <> Тип("ДокументСсылка.ВыдачаПропуска") И ТипЗнч(Пропуск) <> Тип("ДокументСсылка.ВыдачаПропускаНаТС") Тогда
        СообщениеОбОшибке = "Некорректный тип пропуска: " + ТипЗнч(Пропуск);
        Возврат Ложь;
    КонецЕсли;
    
    Если Пропуск.Статус <> СтатусВыдан Тогда
        СообщениеОбОшибке = "Пропуск " + Пропуск + " имеет статус " + Пропуск.Статус + ", ожидается 'Выдан'!";
        Возврат Ложь;
    КонецЕсли;
    
    Если Пропуск.ДатаОкончания < ДатаПроверки Тогда
        СообщениеОбОшибке = "Пропуск " + Пропуск + " истёк срок действия!";
        Возврат Ложь;
    КонецЕсли;
    
    Возврат Истина;
КонецФункции

// Проверяет, что зона доступа соответствует пропуску
Функция ЗонаДоступаСоответствуетПропуску(Пропуск, ЗонаДоступа, СообщениеОбОшибке = "") Экспорт
    Если Пропуск.ЗонаДоступа <> ЗонаДоступа Тогда
        СообщениеОбОшибке = "Зона доступа " + ЗонаДоступа + " не соответствует зоне пропуска " + Пропуск.ЗонаДоступа + "!";
        Возврат Ложь;
    КонецЕсли;
    Возврат Истина;
КонецФункции

// Проверяет уникальность движения в регистре
Функция ДвижениеУникально(ИмяРегистра, ПараметрыПроверки, СообщениеОбОшибке = "") Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1 Период
    |ИЗ РегистрНакопления." + ИмяРегистра + "
    |ГДЕ Период = &Период";
    
    Для Каждого Параметр Из ПараметрыПроверки Цикл
        Если Параметр.Ключ <> "Период" Тогда
            Запрос.Текст = Запрос.Текст + " И " + Параметр.Ключ + " = &" + Параметр.Ключ;
        КонецЕсли;
        Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
    КонецЦикла;
    
    Если Не Запрос.Выполнить().Пустой() Тогда
        СообщениеОбОшибке = "Движение уже зарегистрировано!";
        Возврат Ложь;
    КонецЕсли;
    
    Возврат Истина;
КонецФункции

// Проверяет, что пропуск не аннулирован ранее
Функция ПропускНеАннулирован(Пропуск, ТекущийДокумент, СообщениеОбОшибке = "") Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
    |ИЗ Документ.АннулированиеПропуска
    |ГДЕ Пропуск = &Пропуск
    |    И Ссылка <> &ТекущийДокумент
    |    И Проведен";
    Запрос.УстановитьПараметр("Пропуск", Пропуск);
    Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
    
    Если Не Запрос.Выполнить().Пустой() Тогда
        СообщениеОбОшибке = "Пропуск " + Пропуск + " уже аннулирован другим документом!";
        Возврат Ложь;
    КонецЕсли;
    
    Возврат Истина;
КонецФункции

// Проверяет срок действия документа
Функция СрокДействияКорректен(ДатаНачала, ДатаОкончания, СообщениеОбОшибке = "") Экспорт
    МаксимальныйСрок = Константы.МаксимальныйСрокДействия.Получить();
    Если МаксимальныйСрок > 0 Тогда
        РазницаДней = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / 86400;
        Если РазницаДней > МаксимальныйСрок Тогда
            СообщениеОбОшибке = "Срок действия превышает максимальный (" + МаксимальныйСрок + " дней).";
            Возврат Ложь;
        КонецЕсли;
    КонецЕсли;
    Возврат Истина;
КонецФункции
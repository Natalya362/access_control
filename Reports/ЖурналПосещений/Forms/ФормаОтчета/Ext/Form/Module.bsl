
Процедура ПечатьЖурналПосещений(ПараметрКоманды, ПараметрыВыполненияКоманды) 
	
    Если ТипЗнч(ПараметрыВыполненияКоманды.Источник) = Тип("УправляемаяФорма") Тогда
        ДатаНачала = ПараметрыВыполненияКоманды.Источник.ДатаНачала;
        ДатаОкончания = ПараметрыВыполненияКоманды.Источник.ДатаОкончания;
    Иначе
        ДатаНачала = НачалоДня(ТекущаяДата());
        ДатаОкончания = КонецДня(ТекущаяДата());
    КонецЕсли;
    
    // Формируем печатную форму
    ТабличныйДокумент = СформироватьПечатнуюФорму(ДатаНачала, ДатаОкончания);
    
    // Настройки страницы для листа A4
    ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
    ТабличныйДокумент.ПолеСлева = 5;
    ТабличныйДокумент.ПолеСправа = 5;
    ТабличныйДокумент.ПолеСверху = 5;
    ТабличныйДокумент.ПолеСнизу = 5;
    ТабличныйДокумент.АвтоМасштаб = Истина;
    
    // Выводим документ
    ТабличныйДокумент.Показать("Журнал посещений");  
	
КонецПроцедуры

Функция ПолучитьТаблицуПоФизическимЛицам(ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ДвиженияПропусков.ФизическоеЛицо КАК ФизическоеЛицо,
    |   ФизическиеЛица.НомерДокумента КАК НомерДокумента,
    |   ФизическиеЛица.ДатаРождения КАК ДатаРождения,
    |   ФизическиеЛица.Пол КАК Пол,
    |   ДвиженияПропусков.ТранспортноеСредство КАК ТранспортноеСредство,
    |   ДвиженияПропусков.Причина КАК Причина,
    |   ДвиженияПропусков.Пропуск.Представление КАК Пропуск,
    |   МАКСИМУМ(ЕСТЬNULL(ДвиженияДоступа.ДатаВремя, ДАТАВРЕМЯ(1,1,1))) КАК ДатаВремяДоступа,
    |   МАКСИМУМ(ЕСТЬNULL(ДвиженияТС.ДатаВремя, ДАТАВРЕМЯ(1,1,1))) КАК ДатаВремяТС,
    |   МАКСИМУМ(ВЫБОР
    |       КОГДА ЕСТЬNULL(ДвиженияДоступа.ДатаВремя, ДАТАВРЕМЯ(1,1,1)) > ЕСТЬNULL(ДвиженияТС.ДатаВремя, ДАТАВРЕМЯ(1,1,1))
    |           ТОГДА ЕСТЬNULL(ДвиженияДоступа.ДатаВремя, ДАТАВРЕМЯ(1,1,1))
    |       ИНАЧЕ ЕСТЬNULL(ДвиженияТС.ДатаВремя, ДАТАВРЕМЯ(1,1,1))
    |   КОНЕЦ) КАК ДатаИВремяПосещения,
    |   ЕСТЬNULL(ДвиженияДоступа.ТипДвижения, ЗНАЧЕНИЕ(Перечисление.ТипыДвижения.ПустаяСсылка)) КАК ТипДвижения,
    |   ЕСТЬNULL(ДвиженияТС.ТипДвиженияТС, ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияТС.ПустаяСсылка)) КАК ТипДвиженияТС,
    |   ЕСТЬNULL(Инциденты.СерьезностьИнцидента, 0) КАК СерьезностьИнцидента,
    |   ЕСТЬNULL(Инциденты.ДатаИнцидента, ДАТАВРЕМЯ(1,1,1)) КАК ДатаИнцидента,
    |   ДвиженияПропусков.ТочкаКонтроля КАК ТочкаКонтроля,
    |   МАКСИМУМ(ВЫБОР
    |       КОГДА ЕСТЬNULL(ДвиженияДоступа.ЗонаДоступа, """") <> """"
    |           ТОГДА ЕСТЬNULL(ДвиженияДоступа.ЗонаДоступа, """")
    |       КОГДА ЕСТЬNULL(ДвиженияТС.ЗонаДоступа, """") <> """"
    |           ТОГДА ЕСТЬNULL(ДвиженияТС.ЗонаДоступа, """")
    |       ИНАЧЕ """"
    |   КОНЕЦ) КАК ЗонаДоступа
    |ИЗ
    |   РегистрНакопления.ДвиженияПропусков КАК ДвиженияПропусков
    |   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |   ПО ДвиженияПропусков.ФизическоеЛицо = ФизическиеЛица.Ссылка
    |   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДоступа КАК ДвиженияДоступа
    |   ПО ДвиженияПропусков.Пропуск = ДвиженияДоступа.Пропуск
    |   И ДвиженияПропусков.ТочкаКонтроля = ДвиженияДоступа.ТочкаКонтроля
    |   И (ДвиженияДоступа.ДатаВремя МЕЖДУ &ДатаНачала И &ДатаОкончания)
    |   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияТС КАК ДвиженияТС
    |   ПО ДвиженияПропусков.ТранспортноеСредство = ДвиженияТС.ТранспортноеСредство
    |   И ДвиженияПропусков.Пропуск = ДвиженияТС.Пропуск
    |   И (ДвиженияТС.ДатаВремя МЕЖДУ &ДатаНачала И &ДатаОкончания)
    |   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Инциденты КАК Инциденты
    |   ПО ДвиженияПропусков.ФизическоеЛицо = Инциденты.ФизическоеЛицо
    |   И ДвиженияПропусков.ТочкаКонтроля = Инциденты.ТочкаКонтроля
    |ГДЕ
    |   (ДвиженияПропусков.Пропуск ССЫЛКА Документ.ВыдачаПропуска
    |   ИЛИ ДвиженияПропусков.Пропуск ССЫЛКА Документ.ВыдачаПропускаНаТС)
    |   И (ДвиженияДоступа.ДатаВремя ЕСТЬ НЕ NULL
    |      ИЛИ ДвиженияТС.ДатаВремя ЕСТЬ НЕ NULL)
    |СГРУППИРОВАТЬ ПО
    |   ДвиженияПропусков.ФизическоеЛицо,
    |   ФизическиеЛица.НомерДокумента,
    |   ФизическиеЛица.ДатаРождения,
    |   ФизическиеЛица.Пол,
    |   ДвиженияПропусков.ТранспортноеСредство,
    |   ДвиженияПропусков.Причина,
    |   ДвиженияПропусков.Пропуск,
    |   ЕСТЬNULL(ДвиженияДоступа.ТипДвижения, ЗНАЧЕНИЕ(Перечисление.ТипыДвижения.ПустаяСсылка)),
    |   ЕСТЬNULL(ДвиженияТС.ТипДвиженияТС, ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияТС.ПустаяСсылка)),
    |   ЕСТЬNULL(Инциденты.СерьезностьИнцидента, 0),
    |   ЕСТЬNULL(Инциденты.ДатаИнцидента, ДАТАВРЕМЯ(1,1,1)),
    |   ДвиженияПропусков.ТочкаКонтроля
    |ИМЕЮЩИЕ
    |   МАКСИМУМ(ВЫБОР
    |       КОГДА ЕСТЬNULL(ДвиженияДоступа.ДатаВремя, ДАТАВРЕМЯ(1,1,1)) > ЕСТЬNULL(ДвиженияТС.ДатаВремя, ДАТАВРЕМЯ(1,1,1))
    |           ТОГДА ЕСТЬNULL(ДвиженияДоступа.ДатаВремя, ДАТАВРЕМЯ(1,1,1))
    |       ИНАЧЕ ЕСТЬNULL(ДвиженияТС.ДатаВремя, ДАТАВРЕМЯ(1,1,1))
    |   КОНЕЦ) <> ДАТАВРЕМЯ(1,1,1)
    |УПОРЯДОЧИТЬ ПО
    |   ФизическоеЛицо,
    |   ДатаИВремяПосещения";   
	
    // Установка параметров периода
    Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
        Запрос.УстановитьПараметр("ДатаНачала", Дата(1,1,1));
        Запрос.УстановитьПараметр("ДатаОкончания", Дата(3999,12,31));
    Иначе
        Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
        Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    Если ТипЗнч(РезультатЗапроса) <> Тип("РезультатЗапроса") Тогда
        Сообщить("Ошибка: Результат запроса имеет неверный тип: " + ТипЗнч(РезультатЗапроса));
        ТаблицаПоФизическимЛицам = Новый ТаблицаЗначений;
        ТаблицаПоФизическимЛицам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
        ТаблицаПоФизическимЛицам.Колонки.Добавить("Записи", Новый ОписаниеТипов("ТаблицаЗначений"));
        Возврат ТаблицаПоФизическимЛицам;
    КонецЕсли;
    
    Если РезультатЗапроса.Пустой() Тогда
        Сообщить("Результат запроса пустой. Проверьте данные в регистрах.");
        ТаблицаПоФизическимЛицам = Новый ТаблицаЗначений;
        ТаблицаПоФизическимЛицам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
        ТаблицаПоФизическимЛицам.Колонки.Добавить("Записи", Новый ОписаниеТипов("ТаблицаЗначений"));
        Возврат ТаблицаПоФизическимЛицам;
    КонецЕсли;
    
    ТаблицаРезультат = РезультатЗапроса.Выгрузить();
    
    // Группировка по ФизическоеЛицо
    ТаблицаПоФизическимЛицам = Новый ТаблицаЗначений;
    ТаблицаПоФизическимЛицам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
    ТаблицаПоФизическимЛицам.Колонки.Добавить("Записи", Новый ОписаниеТипов("ТаблицаЗначений"));
    
    Для Каждого Строка Из ТаблицаРезультат Цикл
        СтрокаГруппы = ТаблицаПоФизическимЛицам.Найти(Строка.ФизическоеЛицо, "ФизическоеЛицо");
        Если СтрокаГруппы = НеОпределено Тогда
            СтрокаГруппы = ТаблицаПоФизическимЛицам.Добавить();
            СтрокаГруппы.ФизическоеЛицо = Строка.ФизическоеЛицо;
            СтрокаГруппы.Записи = Новый ТаблицаЗначений;
            СтрокаГруппы.Записи.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
            СтрокаГруппы.Записи.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
            СтрокаГруппы.Записи.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
            СтрокаГруппы.Записи.Колонки.Добавить("ТранспортноеСредство", Новый ОписаниеТипов("СправочникСсылка.ТранспортныеСредства"));
            СтрокаГруппы.Записи.Колонки.Добавить("Причина", Новый ОписаниеТипов("СправочникСсылка.ПричиныПосещения"));
            СтрокаГруппы.Записи.Колонки.Добавить("Пропуск", Новый ОписаниеТипов("Строка"));
            СтрокаГруппы.Записи.Колонки.Добавить("ДатаИВремяПосещения", Новый ОписаниеТипов("Дата"));
            СтрокаГруппы.Записи.Колонки.Добавить("ТипДвижения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДвижения"));
            СтрокаГруппы.Записи.Колонки.Добавить("ТипДвиженияТС", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДвиженияТС"));
            СтрокаГруппы.Записи.Колонки.Добавить("СерьезностьИнцидента", Новый ОписаниеТипов("Число"));
            СтрокаГруппы.Записи.Колонки.Добавить("ТочкаКонтроля", Новый ОписаниеТипов("СправочникСсылка.ТочкиКонтроля"));
            СтрокаГруппы.Записи.Колонки.Добавить("ЗонаДоступа", Новый ОписаниеТипов("Строка"));
        КонецЕсли;
        
        НоваяСтрока = СтрокаГруппы.Записи.Добавить();
        НоваяСтрока.НомерДокумента = Строка.НомерДокумента;
        НоваяСтрока.ДатаРождения = Строка.ДатаРождения;
        НоваяСтрока.Пол = Строка.Пол;
        НоваяСтрока.ТранспортноеСредство = Строка.ТранспортноеСредство;
        НоваяСтрока.Причина = Строка.Причина;
        НоваяСтрока.Пропуск = Строка.Пропуск;
        НоваяСтрока.ДатаИВремяПосещения = Строка.ДатаИВремяПосещения;
        НоваяСтрока.ТипДвижения = Строка.ТипДвижения;
        НоваяСтрока.ТипДвиженияТС = Строка.ТипДвиженияТС;
        НоваяСтрока.СерьезностьИнцидента = Строка.СерьезностьИнцидента;
        НоваяСтрока.ТочкаКонтроля = Строка.ТочкаКонтроля;
        НоваяСтрока.ЗонаДоступа = Строка.ЗонаДоступа;
    КонецЦикла;
    
    Возврат ТаблицаПоФизическимЛицам;
	
КонецФункции

// Функция формирования печатной формы
Функция СформироватьПечатнуюФорму(ДатаНачала, ДатаОкончания) 
	
	ТабличныйДокумент = Новый ТабличныйДокумент; 
    Макет = Отчеты.ЖурналПосещений.ПолучитьМакет("ЖурналПосещений");
    
    ТаблицаПоФизическимЛицам = ПолучитьТаблицуПоФизическимЛицам(ДатаНачала, ДатаОкончания);
    
    ТабличныйДокумент.Очистить(); 
	    
    // Вывод заголовка 
    ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
    Если ОбластьЗаголовок.Области.Количество() > 0 И Найти(ОбластьЗаголовок.Области[0].Текст, "Отчёт не сформирован") > 0 Тогда
        ОбластьЗаголовок.Области[0].Текст = "Журнал посещений";
    КонецЕсли;     
	
    ТабличныйДокумент.Вывести(ОбластьЗаголовок); 
	
	// Добавляем пустую область для отступа
    ОбластьПустая = Новый ТабличныйДокумент;
    ОбластьПустая.Область(1, 1, 1, 1).ВысотаСтроки = 20; 
	ТабличныйДокумент.Вывести(ОбластьПустая);
    
    // Шапка таблицы 
    ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
    ОбластьШапкаТаблицы.Параметры.ФизическоеЛицо = "Физическое лицо";
    ОбластьШапкаТаблицы.Параметры.НомерДокумента = "Номер документа";
    ОбластьШапкаТаблицы.Параметры.ДатаРождения = "Дата рождения";
    ОбластьШапкаТаблицы.Параметры.Пол = "Пол";
    ОбластьШапкаТаблицы.Параметры.ТранспортноеСредство = "Транспортное средство";
    ОбластьШапкаТаблицы.Параметры.Причина = "Причина посещения";
    ОбластьШапкаТаблицы.Параметры.Пропуск = "Пропуск";
    ОбластьШапкаТаблицы.Параметры.ДатаИВремяПосещения = "Дата и время посещения";
    ОбластьШапкаТаблицы.Параметры.СерьезностьИнцидента = "Код инцидента";
    ОбластьШапкаТаблицы.Параметры.ТочкаКонтроля = "Точка контроля"; 
	ОбластьШапкаТаблицы.Параметры.ЗонаДоступа = "Зона доступа";
	
    ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
    
    ТабличныйДокумент.НачатьАвтоГруппировкуСтрок();
    
    Для Каждого СтрокаГруппа Из ТаблицаПоФизическимЛицам Цикл
        // Область для группы (ФизическоеЛицо)
        ОбластьГруппа = Макет.ПолучитьОбласть("ШапкаТаблицы"); 
        ОбластьГруппа.Параметры.ФизическоеЛицо = Строка(СтрокаГруппа.ФизическоеЛицо);
        ОбластьГруппа.Параметры.НомерДокумента = "";
        ОбластьГруппа.Параметры.ДатаРождения = "";
        ОбластьГруппа.Параметры.Пол = "";
        ОбластьГруппа.Параметры.ТранспортноеСредство = "";
        ОбластьГруппа.Параметры.Причина = "";
        ОбластьГруппа.Параметры.Пропуск = "";
        ОбластьГруппа.Параметры.ДатаИВремяПосещения = "";
        ОбластьГруппа.Параметры.СерьезностьИнцидента = "";
        ОбластьГруппа.Параметры.ТочкаКонтроля = ""; 
		ОбластьГруппа.Параметры.ЗонаДоступа = "";
		
        ТабличныйДокумент.Вывести(ОбластьГруппа, 1);
        
        // Область для деталей
        ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
        Если ТипЗнч(СтрокаГруппа.Записи) = Тип("ТаблицаЗначений") Тогда
            Для Каждого СтрокаДетали Из СтрокаГруппа.Записи Цикл
                ОбластьСтрокаТаблицы.Параметры.ФизическоеЛицо = "";
                ОбластьСтрокаТаблицы.Параметры.НомерДокумента = ?(ЗначениеЗаполнено(СтрокаДетали.НомерДокумента), СтрокаДетали.НомерДокумента, "");
                ОбластьСтрокаТаблицы.Параметры.ДатаРождения = ?(ЗначениеЗаполнено(СтрокаДетали.ДатаРождения), Формат(СтрокаДетали.ДатаРождения, "ДФ='dd.MM.yyyy'"), "");
                ОбластьСтрокаТаблицы.Параметры.Пол = ?(ЗначениеЗаполнено(СтрокаДетали.Пол), Строка(СтрокаДетали.Пол), "");
                ОбластьСтрокаТаблицы.Параметры.ТранспортноеСредство = ?(ЗначениеЗаполнено(СтрокаДетали.ТранспортноеСредство), Строка(СтрокаДетали.ТранспортноеСредство), "");
                ОбластьСтрокаТаблицы.Параметры.Причина = ?(ЗначениеЗаполнено(СтрокаДетали.Причина), Строка(СтрокаДетали.Причина), "");
                ОбластьСтрокаТаблицы.Параметры.Пропуск = ?(ЗначениеЗаполнено(СтрокаДетали.Пропуск), СтрокаДетали.Пропуск, "");
                ОбластьСтрокаТаблицы.Параметры.ДатаИВремяПосещения = ?(ЗначениеЗаполнено(СтрокаДетали.ДатаИВремяПосещения), Формат(СтрокаДетали.ДатаИВремяПосещения, "ДФ='dd.MM.yyyy HH:mm:ss'"), "");
                ОбластьСтрокаТаблицы.Параметры.СерьезностьИнцидента = ?(ЗначениеЗаполнено(СтрокаДетали.СерьезностьИнцидента), СтрокаДетали.СерьезностьИнцидента, 0);
                ОбластьСтрокаТаблицы.Параметры.ТочкаКонтроля = ?(ЗначениеЗаполнено(СтрокаДетали.ТочкаКонтроля), Строка(СтрокаДетали.ТочкаКонтроля), "");
				ОбластьСтрокаТаблицы.Параметры.ЗонаДоступа = ?(ЗначениеЗаполнено(СтрокаДетали.ЗонаДоступа), СтрокаДетали.ЗонаДоступа, "");
				
                ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы, 2);
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
    
    // Завершаем авто-группировку
    ТабличныйДокумент.ЗакончитьАвтоГруппировкуСтрок();
    
    // Разрешаем изменение ширины колонок, но запрещаем редактирование данных
    ТабличныйДокумент.Защита = Ложь; 
    ТабличныйДокумент.ТолькоПросмотр = Истина; 
	
    Возврат ТабличныйДокумент; 
	
КонецФункции

// Процедура для формирования отчета на сервере и вывода в реквизит формы
&НаСервере
Процедура СформироватьОтчетНаСервере()  
	
    Результат.Очистить(); 
    ТабличныйДокумент = СформироватьПечатнуюФорму(ДатаНачала, ДатаОкончания); 
    Результат = ТабличныйДокумент; 
    ОбновитьОтображениеДанныхНаСервере(); 
	
КонецПроцедуры

// Обработчик команды кнопки "Сформировать"
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
    СформироватьОтчетНаСервере();
    ОбновитьОтображениеДанных();
	
КонецПроцедуры   

// Процедура для печати отчета
&НаКлиенте 
Процедура ПечатьОтчета(Команда)  
	
    Попытка
        // Формируем печатную форму на сервере
        ТабличныйДокумент = ПолучитьПечатнуюФормуНаСервере();
        Если ТабличныйДокумент = НеОпределено Тогда
            Сообщить("Не удалось сформировать печатную форму.");
            Возврат;
        КонецЕсли;
        
        // Настройки страницы для листа A4
        ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
        ТабличныйДокумент.ПолеСлева = 5;
        ТабличныйДокумент.ПолеСправа = 5;
        ТабличныйДокумент.ПолеСверху = 5;
        ТабличныйДокумент.ПолеСнизу = 5;
        ТабличныйДокумент.АвтоМасштаб = Истина;

        // Выводим документ
        ТабличныйДокумент.Показать("Журнал посещений");
    Исключение
        Сообщить("Ошибка при формировании печатной формы: " + ОписаниеОшибки());
    КонецПопытки; 
	
КонецПроцедуры

// Получение печатной формы 
&НаСервере 
Функция ПолучитьПечатнуюФормуНаСервере() 

    Возврат СформироватьПечатнуюФорму(ДатаНачала, ДатаОкончания);

КонецФункции

// При создании формы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    // Инициализация параметров формы
    Результат.Очистить();
        
    // Установка значений по умолчанию для дат
    Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
        ДатаНачала = НачалоДня(ТекущаяДата());
    КонецЕсли;
    Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
        ДатаОкончания = КонецДня(ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

// Процедура для обновления отображения на сервере
&НаСервере
Процедура ОбновитьОтображениеДанныхНаСервере()
    // Пустая процедура для принудительного обновления
КонецПроцедуры   

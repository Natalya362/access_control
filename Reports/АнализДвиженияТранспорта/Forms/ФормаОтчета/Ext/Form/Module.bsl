
Процедура ПечатьАнализДвиженияТранспорта(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
    // Получаем даты из формы-источника или используем значения по умолчанию
    Если ТипЗнч(ПараметрыВыполненияКоманды.Источник) = Тип("УправляемаяФорма") Тогда
        ДатаНачала = ПараметрыВыполненияКоманды.Источник.ДатаНачала;
        ДатаОкончания = ПараметрыВыполненияКоманды.Источник.ДатаОкончания;
    Иначе
        ДатаНачала = НачалоДня(ТекущаяДата());
        ДатаОкончания = КонецДня(ТекущаяДата());
    КонецЕсли;
    
    // Формируем печатную форму
    ТабличныйДокумент = СформироватьПечатнуюФорму(ДатаНачала, ДатаОкончания);
    
    // Настройки страницы для листа A4
    ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
    ТабличныйДокумент.ПолеСлева = 5;
    ТабличныйДокумент.ПолеСправа = 5;
    ТабличныйДокумент.ПолеСверху = 5;
    ТабличныйДокумент.ПолеСнизу = 5;
    ТабличныйДокумент.АвтоМасштаб = Истина;
    
    // Выводим документ
    ТабличныйДокумент.Показать("Анализ движения транспорта"); 
	
КонецПроцедуры

// Функция для получения объединённой таблицы по физическим лицам
Функция ПолучитьТаблицуПоФизическимЛицам(ДатаНачала, ДатаОкончания) 
	
	Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ДвиженияТС.Посетитель КАК Посетитель,
    |   ДвиженияПропусков.ФизическоеЛицо КАК ФизическоеЛицо,
    |   ДвиженияТС.Пропуск.Представление КАК Пропуск,
    |   ДвиженияТС.ТочкаКонтроля КАК ТочкаКонтроля,
    |   ДвиженияТС.ТипДвиженияТС КАК ТипДвиженияТС,
    |   ДвиженияТС.ТранспортноеСредство КАК ТранспортноеСредство,
    |   ДвиженияТС.ДлительностьПосещения КАК ДлительностьПосещения,
    |   ДвиженияТС.Период КАК Период,
    |   ДвиженияТС.ДатаВремя КАК ДатаВремя,
    |   ЕСТЬNULL(Инциденты.СерьезностьИнцидента, 0) КАК СерьезностьИнцидента,
    |   ЕСТЬNULL(Инциденты.ДатаИнцидента, ДАТАВРЕМЯ(1,1,1)) КАК ДатаИнцидента
    |ИЗ
    |   РегистрНакопления.ДвиженияТС КАК ДвиженияТС
    |   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПропусков КАК ДвиженияПропусков
    |   ПО ДвиженияТС.Пропуск = ДвиженияПропусков.Пропуск
    |   И ДвиженияПропусков.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
    |   И ДвиженияПропусков.Пропуск ССЫЛКА Документ.ВыдачаПропускаНаТС
    |   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Инциденты КАК Инциденты
    |   ПО ДвиженияТС.Пропуск = Инциденты.Пропуск
    |ГДЕ
    |   ДвиженияТС.ТипДвиженияТС В (ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияТС.Въезд), ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияТС.Выезд))
    |   И ДвиженияТС.Пропуск ССЫЛКА Документ.ВыдачаПропускаНаТС
    |   И (ДвиженияТС.ДатаВремя МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ &ДатаНачала = ДАТАВРЕМЯ(1,1,1))
    |УПОРЯДОЧИТЬ ПО
    |   ФизическоеЛицо,
    |   ДатаВремя";
    
    // Установка параметров периода
    Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
        Запрос.УстановитьПараметр("ДатаНачала", Дата(1,1,1)); // Минимальная дата для всех данных
        Запрос.УстановитьПараметр("ДатаОкончания", Дата(3999,12,31)); // Максимальная дата
    Иначе
        Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
        Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания)); // Учитываем весь день
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    Если ТипЗнч(РезультатЗапроса) <> Тип("РезультатЗапроса") Тогда
        Сообщить("Ошибка: Результат запроса имеет неверный тип: " + ТипЗнч(РезультатЗапроса));
        ТаблицаПоФизическимЛицам = Новый ТаблицаЗначений;
        ТаблицаПоФизическимЛицам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
        ТаблицаПоФизическимЛицам.Колонки.Добавить("Записи", Новый ОписаниеТипов("ТаблицаЗначений"));
        Возврат ТаблицаПоФизическимЛицам;
    КонецЕсли;
    
    Если РезультатЗапроса.Пустой() Тогда
        Сообщить("Результат запроса пустой. Проверьте данные в регистре ДвиженияТС.");
        ТаблицаПоФизическимЛицам = Новый ТаблицаЗначений;
        ТаблицаПоФизическимЛицам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
        ТаблицаПоФизическимЛицам.Колонки.Добавить("Записи", Новый ОписаниеТипов("ТаблицаЗначений"));
        Возврат ТаблицаПоФизическимЛицам;
    КонецЕсли;
    
    ТаблицаРезультат = РезультатЗапроса.Выгрузить();
    
    // Группировка по ФизическоеЛицо
    ТаблицаПоФизическимЛицам = Новый ТаблицаЗначений;
    ТаблицаПоФизическимЛицам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
    ТаблицаПоФизическимЛицам.Колонки.Добавить("Записи", Новый ОписаниеТипов("ТаблицаЗначений"));
    
    Для Каждого Строка Из ТаблицаРезультат Цикл
        СтрокаГруппы = ТаблицаПоФизическимЛицам.Найти(Строка.ФизическоеЛицо, "ФизическоеЛицо");
        Если СтрокаГруппы = НеОпределено Тогда
            СтрокаГруппы = ТаблицаПоФизическимЛицам.Добавить();
            СтрокаГруппы.ФизическоеЛицо = Строка.ФизическоеЛицо;
            СтрокаГруппы.Записи = Новый ТаблицаЗначений;
            СтрокаГруппы.Записи.Колонки.Добавить("Посетитель", Новый ОписаниеТипов("СправочникСсылка.Посетители"));
            СтрокаГруппы.Записи.Колонки.Добавить("Пропуск", Новый ОписаниеТипов("Строка"));
            СтрокаГруппы.Записи.Колонки.Добавить("ТочкаКонтроля", Новый ОписаниеТипов("СправочникСсылка.ТочкиКонтроля"));
            СтрокаГруппы.Записи.Колонки.Добавить("ТипДвиженияТС", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДвиженияТС"));
            СтрокаГруппы.Записи.Колонки.Добавить("ТранспортноеСредство", Новый ОписаниеТипов("СправочникСсылка.ТранспортныеСредства"));
            СтрокаГруппы.Записи.Колонки.Добавить("ДлительностьПосещения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
            СтрокаГруппы.Записи.Колонки.Добавить("СерьезностьИнцидента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
            СтрокаГруппы.Записи.Колонки.Добавить("ДатаИнцидента", Новый ОписаниеТипов("Дата"));
            СтрокаГруппы.Записи.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
            СтрокаГруппы.Записи.Колонки.Добавить("ДатаВремя", Новый ОписаниеТипов("Дата")); 
		КонецЕсли;
        
        НоваяСтрока = СтрокаГруппы.Записи.Добавить();
        НоваяСтрока.Посетитель = Строка.Посетитель;
        НоваяСтрока.Пропуск = Строка.Пропуск;
        НоваяСтрока.ТочкаКонтроля = Строка.ТочкаКонтроля;
        НоваяСтрока.ТипДвиженияТС = Строка.ТипДвиженияТС;
        НоваяСтрока.ТранспортноеСредство = Строка.ТранспортноеСредство;
        НоваяСтрока.ДлительностьПосещения = Строка.ДлительностьПосещения;
        НоваяСтрока.СерьезностьИнцидента = Строка.СерьезностьИнцидента;
        НоваяСтрока.ДатаИнцидента = Строка.ДатаИнцидента;
        НоваяСтрока.Период = Строка.Период;
        НоваяСтрока.ДатаВремя = Строка.ДатаВремя; // Добавлено значение ДатаВремя
    КонецЦикла;
	
	
    Возврат ТаблицаПоФизическимЛицам;
КонецФункции

// Функция формирования печатной формы
Функция СформироватьПечатнуюФорму(ДатаНачала, ДатаОкончания) 
	
    ТабличныйДокумент = Новый ТабличныйДокумент; 
    Макет = Отчеты.АнализДвиженияТранспорта.ПолучитьМакет("АнализДвиженияТранспорта");
    
    ТаблицаПоФизическимЛицам = ПолучитьТаблицуПоФизическимЛицам(ДатаНачала, ДатаОкончания);
    
    ТабличныйДокумент.Очистить(); 
    
    // Вывод заголовка 
    ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
    Если ОбластьЗаголовок.Области.Количество() > 0 И Найти(ОбластьЗаголовок.Области[0].Текст, "Отчёт не сформирован") > 0 Тогда
        ОбластьЗаголовок.Области[0].Текст = "Анализ движения транспорта";
    КонецЕсли;     
	
    ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy'");
    ТабличныйДокумент.Вывести(ОбластьЗаголовок);   
	
	// Добавляем пустую область для отступа
    ОбластьПустая = Новый ТабличныйДокумент;
    ОбластьПустая.Область(1, 1, 1, 1).ВысотаСтроки = 12; 
	ТабличныйДокумент.Вывести(ОбластьПустая);
    
    // Шапка таблицы 
    ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
    ОбластьШапкаТаблицы.Параметры.Посетитель = "Посетитель";
    ОбластьШапкаТаблицы.Параметры.Пропуск = "Пропуск";
    ОбластьШапкаТаблицы.Параметры.ТочкаКонтроля = "Точка контроля";
    ОбластьШапкаТаблицы.Параметры.ТипДвиженияТС = "Тип движения ТС";
    ОбластьШапкаТаблицы.Параметры.ТранспортноеСредство = "Транспортное средство";
    ОбластьШапкаТаблицы.Параметры.ДлительностьПосещения = "Длительность посещения";
    ОбластьШапкаТаблицы.Параметры.СерьезностьИнцидента = "Серьезность инцидента";
    ОбластьШапкаТаблицы.Параметры.ДатаИнцидента = "Дата инцидента";
    ОбластьШапкаТаблицы.Параметры.ДатаВремя = "Дата и время"; // Добавлен новый параметр для шапки
	
    ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
    
    ТабличныйДокумент.НачатьАвтоГруппировкуСтрок();
    
    Для Каждого СтрокаГруппа Из ТаблицаПоФизическимЛицам Цикл
        // Область для группы (ФизическоеЛицо)
        ОбластьГруппа = Макет.ПолучитьОбласть("ШапкаТаблицы"); 
        ОбластьГруппа.Параметры.Посетитель = Строка(СтрокаГруппа.ФизическоеЛицо);
        ОбластьГруппа.Параметры.Пропуск = "";
        ОбластьГруппа.Параметры.ТочкаКонтроля = "";
        ОбластьГруппа.Параметры.ТипДвиженияТС = "";
        ОбластьГруппа.Параметры.ТранспортноеСредство = "";
        ОбластьГруппа.Параметры.ДлительностьПосещения = "";
        ОбластьГруппа.Параметры.СерьезностьИнцидента = "";
        ОбластьГруппа.Параметры.ДатаИнцидента = "";
        ОбластьГруппа.Параметры.ДатаВремя = ""; 
		
        ТабличныйДокумент.Вывести(ОбластьГруппа, 1); // Уровень группировки 1
        
        // Области для деталей
        ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
        Если ТипЗнч(СтрокаГруппа.Записи) = Тип("ТаблицаЗначений") Тогда
            Для Каждого СтрокаДетали Из СтрокаГруппа.Записи Цикл
                ОбластьСтрокаТаблицы.Параметры.ФизическоеЛицо = "";
                ОбластьСтрокаТаблицы.Параметры.Пропуск = ?(ЗначениеЗаполнено(СтрокаДетали.Пропуск), СтрокаДетали.Пропуск, "");
                ОбластьСтрокаТаблицы.Параметры.ТочкаКонтроля = ?(ЗначениеЗаполнено(СтрокаДетали.ТочкаКонтроля), Строка(СтрокаДетали.ТочкаКонтроля), "");
                ОбластьСтрокаТаблицы.Параметры.ТипДвиженияТС = ?(ЗначениеЗаполнено(СтрокаДетали.ТипДвиженияТС), Строка(СтрокаДетали.ТипДвиженияТС), "");
                ОбластьСтрокаТаблицы.Параметры.ТранспортноеСредство = ?(ЗначениеЗаполнено(СтрокаДетали.ТранспортноеСредство), Строка(СтрокаДетали.ТранспортноеСредство), "");
                ОбластьСтрокаТаблицы.Параметры.ДлительностьПосещения = ?(ЗначениеЗаполнено(СтрокаДетали.ДлительностьПосещения), СтрокаДетали.ДлительностьПосещения, 0);
                ОбластьСтрокаТаблицы.Параметры.СерьезностьИнцидента = ?(ЗначениеЗаполнено(СтрокаДетали.СерьезностьИнцидента), СтрокаДетали.СерьезностьИнцидента, 0);
                ОбластьСтрокаТаблицы.Параметры.ДатаИнцидента = ?(ЗначениеЗаполнено(СтрокаДетали.ДатаИнцидента), Формат(СтрокаДетали.ДатаИнцидента, "ДФ='dd.MM.yyyy'"), "");
                ОбластьСтрокаТаблицы.Параметры.ДатаВремя = ?(ЗначениеЗаполнено(СтрокаДетали.ДатаВремя), Формат(СтрокаДетали.ДатаВремя, "ДФ='dd.MM.yyyy HH:mm:ss'"), ""); // Добавлено значение ДатаВремя
                
                ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы, 2); // Уровень детализации 2
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
    
    // Завершаем авто-группировку
    ТабличныйДокумент.ЗакончитьАвтоГруппировкуСтрок();
    
    // Разрешаем изменение ширины колонок, но запрещаем редактирование данных
    ТабличныйДокумент.Защита = Ложь; 
    ТабличныйДокумент.ТолькоПросмотр = Истина; 
	
    Возврат ТабличныйДокумент;  
	
КонецФункции

// Процедура для формирования отчета на сервере и вывода в реквизит формы
&НаСервере
Процедура СформироватьОтчетНаСервере()  
	
    Результат.Очистить(); 
	ТабличныйДокумент = СформироватьПечатнуюФорму(ДатаНачала, ДатаОкончания); 
	Результат = ТабличныйДокумент; 
	ОбновитьОтображениеДанныхНаСервере(); 
	
КонецПроцедуры

// Обработчик команды кнопки "Сформировать"
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
    СформироватьОтчетНаСервере();
    ОбновитьОтображениеДанных();
	
КонецПроцедуры   

&НаКлиенте 
Процедура ПечатьОтчета(Команда)  
	
	Попытка
        // Формируем печатную форму на сервере
        ТабличныйДокумент = ПолучитьПечатнуюФормуНаСервере();
        Если ТабличныйДокумент = Неопределено Тогда
            Сообщить("Не удалось сформировать печатную форму.");
            Возврат;
        КонецЕсли;
        
        // Настройки страницы для листа A4
        ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
        ТабличныйДокумент.ПолеСлева = 5;
        ТабличныйДокумент.ПолеСправа = 5;
        ТабличныйДокумент.ПолеСверху = 5;
        ТабличныйДокумент.ПолеСнизу = 5;
        ТабличныйДокумент.АвтоМасштаб = Истина;

        // Выводим документ
        ТабличныйДокумент.Показать("Анализ движения транспорта");
    Исключение
        Сообщить("Ошибка при формировании печатной формы: " + ОписаниеОшибки());
    КонецПопытки; 
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьПечатнуюФормуНаСервере() 

	Возврат СформироватьПечатнуюФорму(ДатаНачала, ДатаОкончания);

КонецФункции

// При создании формы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)     
	
    // Инициализация параметров формы
    Результат.Очистить(); 
	    
    // Установка значений по умолчанию для дат
    Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
        ДатаНачала = НачалоДня(ТекущаяДата());
	КонецЕсли;     
	
    Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
        ДатаОкончания = КонецДня(ТекущаяДата());
	КонецЕсли;          
	
КонецПроцедуры

// Процедура для обновления отображения на сервере
&НаСервере
Процедура ОбновитьОтображениеДанныхНаСервере()
    // Пустая процедура для принудительного обновления
КонецПроцедуры                       


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если Объект.БизнесПроцесс.Пустая() Тогда
        Сообщить("Бизнес процесс не связан с задачей");
        Отказ = Истина;
        Возврат;
    КонецЕсли;  
	
    Если ЗначениеЗаполнено(Объект.Предмет) Тогда
        ТипЗаявки = ОпределитьТипЗаявки(Объект.Предмет); 
	Иначе
        ТипЗаявки = "Не определено";
	КонецЕсли;    
	    
    УстановкаВидимости();
	
КонецПроцедуры     

&НаСервере
Процедура ЗавершитьЗадачу(РезультатВыполнения)
    
    Попытка
        ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
        Если ЗадачаОбъект.Выполнена Тогда
            Сообщить("Задача уже выполнена.");
            Возврат;
        КонецЕсли;
        
        УстановитьПривилегированныйРежим(Истина);
        ЗадачаОбъект.РезультатВыполнения = РезультатВыполнения;
        ЗадачаОбъект.ДатаВыполнения = ТекущаяДатаСеанса();
        ЗадачаОбъект.Выполнена = Истина;
        ЗадачаОбъект.СтатусыЗадач = Перечисления.СтатусыЗадач.Готово;
        ЗадачаОбъект.Записать();
        УстановитьПривилегированныйРежим(Ложь);
        Сообщить("Задача сохранена с результатом: " + РезультатВыполнения);
        
        // Обновляем статус заявки
        ЗаявкаОбъект = ЗадачаОбъект.Предмет.ПолучитьОбъект();
        Если РезультатВыполнения = "Отклонено" Тогда
            ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.Отклонена;
            Сообщить("Статус заявки изменён на 'Отклонена'.");
        ИначеЕсли РезультатВыполнения = "Согласовано" Тогда
            ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.Согласована;
            Сообщить("Статус заявки изменён на 'Согласована'.");
        КонецЕсли;
        УстановитьПривилегированныйРежим(Истина);
        ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
        УстановитьПривилегированныйРежим(Ложь);

        Сообщить("Задача успешно завершена с результатом: " + РезультатВыполнения);
    Исключение
        Сообщить("Ошибка при завершении задачи: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЗадачуНаСервере(РезультатВыполнения)  
	
	Попытка
        ЗадачаОбъект = Объект.Ссылка.ПолучитьОбъект();
        Если ЗадачаОбъект.Выполнена Тогда
            Сообщить("Задача уже выполнена.");
            Возврат;
        КонецЕсли;

        УстановитьПривилегированныйРежим(Истина);
        ЗадачаОбъект.РезультатВыполнения = РезультатВыполнения;
        ЗадачаОбъект.ДатаВыполнения = ТекущаяДатаСеанса();
        ЗадачаОбъект.Выполнена = Истина;
        ЗадачаОбъект.Статус = Перечисления.СтатусыЗадач.Готово;
        ЗадачаОбъект.Записать();
        УстановитьПривилегированныйРежим(Ложь);
        Сообщить("Задача сохранена с результатом: " + РезультатВыполнения);

        // Проверяем корректность ссылки на Заявку
        Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.Предмет) Тогда
            Сообщить("Ошибка: Предмет задачи не заполнен! Пытаемся получить из бизнес-процесса...");
            Если ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс) Тогда
                БизнесПроцессОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
                ЗадачаОбъект.Предмет = БизнесПроцессОбъект.Заявка;
                Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.Предмет) Тогда
                    Сообщить("Ошибка: Предмет не найден в бизнес-процессе!");
                    Возврат;
                Иначе
                    Сообщить("Предмет восстановлен из бизнес-процесса: " + ЗадачаОбъект.Предмет);
                    УстановитьПривилегированныйРежим(Истина);
                    ЗадачаОбъект.Записать();
                    УстановитьПривилегированныйРежим(Ложь);
                КонецЕсли;
            Иначе
                Сообщить("Ошибка: Бизнес-процесс не указан!");
                Возврат;
            КонецЕсли;
        КонецЕсли;

        // Обновляем статус заявки
        Попытка
            ЗаявкаОбъект = ЗадачаОбъект.Предмет.ПолучитьОбъект();
            Если ЗаявкаОбъект = Неопределено Тогда
                Сообщить("Ошибка: Не удалось получить объект заявки: " + Строка(ЗадачаОбъект.Предмет));
                Возврат;
            КонецЕсли;

            ТекущийСтатус = ЗаявкаОбъект.СтатусЗаявки;
            Сообщить("Текущий статус заявки перед изменением: " + ТекущийСтатус);

            Если РезультатВыполнения = "Отклонить" Тогда
                ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.Отклонена;
                Сообщить("Устанавливаем статус заявки: 'Отклонена'.");
            ИначеЕсли РезультатВыполнения = "Согласовано" Тогда
                ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявки.Согласована;
                Сообщить("Устанавливаем статус заявки: 'Согласована'.");
            КонецЕсли;

            УстановитьПривилегированныйРежим(Истина);
            ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
            УстановитьПривилегированныйРежим(Ложь);

            // Проверяем, что статус изменился
            ЗаявкаОбъектПослеЗаписи = ЗадачаОбъект.Предмет.ПолучитьОбъект();
            Если ЗаявкаОбъектПослеЗаписи.СтатусЗаявки <> ЗаявкаОбъект.СтатусЗаявки Тогда
                Сообщить("Ошибка: Статус заявки не изменился! Текущий статус: " + ЗаявкаОбъектПослеЗаписи.СтатусЗаявки);
            Иначе
                Сообщить("Статус заявки успешно изменён на: " + ЗаявкаОбъектПослеЗаписи.СтатусЗаявки);
            КонецЕсли;
        Исключение
            Сообщить("Ошибка при записи статуса заявки: " + ОписаниеОшибки());
            Возврат;
        КонецПопытки;

        // Если задача отклонена, прерываем бизнес-процесс
        Если РезультатВыполнения = "Отклонить" Тогда
            Попытка
                БизнесПроцессОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
                БизнесПроцессОбъект.Прерывание = Истина;
                УстановитьПривилегированныйРежим(Истина);
                БизнесПроцессОбъект.Записать();
                Если БизнесПроцессОбъект.Прерывание И НЕ БизнесПроцессОбъект.Завершен Тогда
                    БизнесПроцессОбъект.ЗавершитьВсеЗадачи();
                    БизнесПроцессОбъект.Завершен = Истина;
                    БизнесПроцессОбъект.ДатаЗавершения = ТекущаяДатаСеанса();
                    БизнесПроцессОбъект.Записать();
                КонецЕсли;
                УстановитьПривилегированныйРежим(Ложь);
                Сообщить("Бизнес-процесс помечен для прерывания и завершён.");
            Исключение
                Сообщить("Ошибка при установке флага Прерывание или завершении процесса: " + ОписаниеОшибки());
            КонецПопытки;
        КонецЕсли;

        Сообщить("Задача завершена с результатом: " + РезультатВыполнения);
    Исключение
        Сообщить("Ошибка при завершении задачи: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаВидимости()   
		    
    Элементы.КомандаСогласована.Видимость = Ложь;
    Элементы.КомандаОтклонить.Видимость = Ложь;
    Элементы.КомандаВыполнена.Видимость = Ложь;  
    Элементы.КомандаСоздатьНаОсновании.Видимость = Ложь;

    ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
    ТекущаяТочка = ЗадачаОбъект.ТочкаМаршрута;
    РольИсполнителя = ЗадачаОбъект.РольИсполнителя;
    
    // Синхронизируем поле статуса (для отображения)
    Статус = ЗадачаОбъект.СтатусыЗадач;
    
    Если ТекущаяТочка = БизнесПроцессы.СогласованиеЗаявки.ТочкиМаршрута.СогласованиеРежим
        И РольИсполнителя = Справочники.РолиИсполнителей.ДиректорДепартамента Тогда
        Элементы.КомандаСогласована.Видимость = Истина;
        Элементы.КомандаОтклонить.Видимость = Истина;
    ИначеЕсли ТекущаяТочка = БизнесПроцессы.СогласованиеЗаявки.ТочкиМаршрута.СогласованиеРежим2
        И РольИсполнителя = Справочники.РолиИсполнителей.НачальникБюро Тогда
        Элементы.КомандаСогласована.Видимость = Истина;
        Элементы.КомандаОтклонить.Видимость = Истина;
    ИначеЕсли ТекущаяТочка = БизнесПроцессы.СогласованиеЗаявки.ТочкиМаршрута.Согласование
        И РольИсполнителя = Справочники.РолиИсполнителей.НачальникБюро Тогда
        Элементы.КомандаСогласована.Видимость = Истина;
        Элементы.КомандаОтклонить.Видимость = Истина;
    ИначеЕсли ТекущаяТочка = БизнесПроцессы.СогласованиеЗаявки.ТочкиМаршрута.ВыдачаПропуска
        И РольИсполнителя = Справочники.РолиИсполнителей.СотрудникБюро Тогда
        Элементы.КомандаВыполнена.Видимость = Истина;   
        Элементы.КомандаСоздатьНаОсновании.Видимость = Истина; 
    ИначеЕсли ТекущаяТочка = БизнесПроцессы.СогласованиеЗаявки.ТочкиМаршрута.ВыдачаПропускаНаТС
        И РольИсполнителя = Справочники.РолиИсполнителей.СотрудникБюро Тогда
        Элементы.КомандаВыполнена.Видимость = Истина;   
        Элементы.КомандаСоздатьНаОсновании.Видимость = Истина;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокументНаОснованииНаСервере()
	
    ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
    ТекущаяТочка = ЗадачаОбъект.ТочкаМаршрута;
    ДокументСсылка = Документы.ВыдачаПропуска.ПустаяСсылка(); // По умолчанию
    
    Попытка
        // Определяем, какой документ создавать
        Если ТекущаяТочка = БизнесПроцессы.СогласованиеЗаявки.ТочкиМаршрута.ВыдачаПропуска Тогда     
            ДокументОбъект = Документы.ВыдачаПропуска.СоздатьДокумент();
            ДокументОбъект.Дата = ТекущаяДатаСеанса(); 
            ДокументОбъект.Заявка = ЗадачаОбъект.Предмет;

                                  
        ИначеЕсли ТекущаяТочка = БизнесПроцессы.СогласованиеЗаявки.ТочкиМаршрута.ВыдачаПропускаНаТС Тогда
            ДокументОбъект = Документы.ВыдачаПропускаНаТС.СоздатьДокумент();
            ДокументОбъект.Дата = ТекущаяДатаСеанса();
            ДокументОбъект.Заявка = ЗадачаОбъект.Предмет;
            ДокументОбъект.ФизическоеЛицо = ПараметрыСеанса.ТекущийПользователь;
            Сообщить("Создаётся документ ВыдачаПропускаНаТС. Заявка: " + ДокументОбъект.Заявка);
            
        Иначе   
            Сообщить("Не удалось определить тип документа для создания!"); 
            Возврат ДокументСсылка;
        КонецЕсли;
        
        // Записываем документ
        ДокументОбъект.Записать();

        Сообщить("Создан документ: " + ДокументОбъект.Ссылка);
        ДокументСсылка = ДокументОбъект.Ссылка;
        
        Возврат ДокументСсылка;
		
    Исключение
        Сообщить("Ошибка при создании документа: " + ОписаниеОшибки());
        Возврат ДокументСсылка;
    КонецПопытки;
	
КонецФункции

&НаСервере
Функция ОпределитьТипЗаявки(Заявка)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   1 КАК Поле
        |ИЗ
        |   Документ.ЗаявкаНаПропуск КАК ЗаявкаНаПропуск
        |ГДЕ
        |   ЗаявкаНаПропуск.Ссылка = &Заявка
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ ПЕРВЫЕ 1
        |   0
        |ИЗ
        |   Документ.ЗаявкаНаВъездТС КАК ЗаявкаНаВъездТС
        |ГДЕ
        |   ЗаявкаНаВъездТС.Ссылка = &Заявка";
    Запрос.УстановитьПараметр("Заявка", Заявка);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    Если Выборка.Поле = 1 Тогда
        Возврат "ЗаявкаНаПропуск";
    Иначе
        Возврат "ЗаявкаНаВъездТС";
    КонецЕсли;
КонецФункции

// Клиентские процедуры
&НаКлиенте
Процедура КомандаСогласована(Команда)
	
    ЗавершитьЗадачуНаСервере("Согласовано");
    ОповеститьОбИзменении(Объект.Ссылка);
    Закрыть();      
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтклонить(Команда) 
	
    ЗавершитьЗадачуНаСервере("Отклонить");
    ОповеститьОбИзменении(Объект.Ссылка);
   	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнена(Команда)  
	
    ЗавершитьЗадачуНаСервере("Выполнено");
    ОповеститьОбИзменении(Объект.Ссылка);
    Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьНаОсновании(Команда) 
	
    ДокументСсылка = СоздатьДокументНаОснованииНаСервере();
    ОткрытьЗначение(ДокументСсылка);	
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ)
	
	// Пропускаем проверку, если запись уже отменена
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка обязательного поля Наименование
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Наименование) Тогда
		Сообщить("Поле Наименование не заполнено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка обязательного поля ТипПомещения
	Если Не ЭтотОбъект.ЭтоГруппа И Не ЗначениеЗаполнено(ЭтотОбъект.ТипПомещения) Тогда
		Сообщить("Поле ТипПомещения не заполнено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка обязательного поля ТипПодразделения
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ТипПодразделения) Тогда
		Сообщить("Поле ТипПодразделения не заполнено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка обязательного поля ОтветственноеЛицо
	Если Не ЭтотОбъект.ЭтоГруппа И Не ЗначениеЗаполнено(ЭтотОбъект.ОтветственноеЛицо) Тогда
		Сообщить("Поле ОтветственноеЛицо не заполнено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка обязательного поля КонтактныйТелефон только для элементов (не групп)
	Если Не ЭтотОбъект.ЭтоГруппа И Не ЗначениеЗаполнено(ЭтотОбъект.КонтактныйТелефон) Тогда
		Сообщить("Поле Контактный телефон не заполнено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка формата КонтактныйТелефон: +7 (XXX) XXX-XX-XX только для элементов (не групп)
	Если Не ЭтотОбъект.ЭтоГруппа Тогда
		Телефон = СокрЛП(ЭтотОбъект.КонтактныйТелефон);
		ДопустимыеСимволы = "0123456789+() -";
		Для Позиция = 1 По СтрДлина(Телефон) Цикл
			Символ = Сред(Телефон, Позиция, 1);
			Если СтрНайти(ДопустимыеСимволы, Символ) = 0 Тогда
				Сообщить("Контактный телефон содержит недопустимые символы! Допустимы только цифры, '+', '(', ')', пробел и '-'.");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка длины
		Если СтрДлина(Телефон) > 20 Тогда
			Сообщить("Контактный телефон превышает допустимую длину (20 символов)!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Проверка формата телефона: +7 (XXX) XXX-XX-XX
		МассивЧастейТелефона = СтрРазделить(Телефон, " ", Ложь);
		Если МассивЧастейТелефона.Количество() <> 3 Тогда
			Сообщить("Контактный телефон должен быть в формате +7 (XXX) XXX-XX-XX (например, +7 (999) 123-45-67)!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Проверка первой части: +7
		Часть1 = МассивЧастейТелефона[0];
		Если Часть1 <> "+7" Тогда
			Сообщить("Контактный телефон должен начинаться с '+7'!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Проверка второй части: (XXX)
		Часть2 = МассивЧастейТелефона[1];
		Если СтрДлина(Часть2) <> 5 Или Лев(Часть2, 1) <> "(" Или Прав(Часть2, 1) <> ")" Тогда
			Сообщить("Код региона в контактном телефоне должен быть в формате (XXX), например (999)!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		КодРегиона = Сред(Часть2, 2, 3);
		Для Позиция = 1 По СтрДлина(КодРегиона) Цикл
			Символ = Сред(КодРегиона, Позиция, 1);
			Если СтрНайти("0123456789", Символ) = 0 Тогда
				Сообщить("Код региона в контактном телефоне должен содержать только цифры!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка третьей части: XXX-XX-XX
		Часть3 = МассивЧастейТелефона[2];
		МассивПодчастей = СтрРазделить(Часть3, "-", Ложь);
		Если МассивПодчастей.Количество() <> 3 Тогда
			Сообщить("Номер телефона должен быть в формате XXX-XX-XX (например, 123-45-67)!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Проверка XXX
		Если СтрДлина(МассивПодчастей[0]) <> 3 Тогда
			Сообщить("Первая часть номера телефона должна содержать 3 цифры!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Для Позиция = 1 По СтрДлина(МассивПодчастей[0]) Цикл
			Символ = Сред(МассивПодчастей[0], Позиция, 1);
			Если СтрНайти("0123456789", Символ) = 0 Тогда
				Сообщить("Первая часть номера телефона должна содержать только цифры!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка XX
		Если СтрДлина(МассивПодчастей[1]) <> 2 Тогда
			Сообщить("Вторая часть номера телефона должна содержать 2 цифры!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Для Позиция = 1 По СтрДлина(МассивПодчастей[1]) Цикл
			Символ = Сред(МассивПодчастей[1], Позиция, 1);
			Если СтрНайти("0123456789", Символ) = 0 Тогда
				Сообщить("Вторая часть номера телефона должна содержать только цифры!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка XX
		Если СтрДлина(МассивПодчастей[2]) <> 2 Тогда
			Сообщить("Третья часть номера телефона должна содержать 2 цифры!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Для Позиция = 1 По СтрДлина(МассивПодчастей[2]) Цикл
			Символ = Сред(МассивПодчастей[2], Позиция, 1);
			Если СтрНайти("0123456789", Символ) = 0 Тогда
				Сообщить("Третья часть номера телефона должна содержать только цифры!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверка обязательного поля Адрес только для элементов (не групп)
	Если Не ЭтотОбъект.ЭтоГруппа И Не ЗначениеЗаполнено(ЭтотОбъект.Адрес) Тогда
		Сообщить("Поле Адрес не заполнено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка длины Адреса только для элементов (не групп)
	Если Не ЭтотОбъект.ЭтоГруппа И СтрДлина(СокрЛП(ЭтотОбъект.Адрес)) > 100 Тогда
		Сообщить("Адрес превышает допустимую длину (100 символов)!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка формата Почта, если заполнено, только для элементов (не групп)
	Если Не ЭтотОбъект.ЭтоГруппа И ЗначениеЗаполнено(ЭтотОбъект.Почта) Тогда
		ПочтаБезПробелов = СокрЛП(ЭтотОбъект.Почта);
		Если СтрДлина(ПочтаБезПробелов) > 20 Тогда
			Сообщить("Почта превышает допустимую длину (20 символов)!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если СтрНайти(ПочтаБезПробелов, "@") = 0 Тогда
			Сообщить("Почта должна содержать символ '@'!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Установка значения Активно по умолчанию
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Активно) Тогда
		ЭтотОбъект.Активно = Истина;
	КонецЕсли;
	
	// Определяем родительскую группу на основе ТипПодразделения
	// Если это не группа, устанавливаем родителя
	Если Не ЭтотОбъект.ЭтоГруппа Тогда
		НазваниеГруппы = "";
		Если ЭтотОбъект.ТипПодразделения = Перечисления.ТипПодразделения.КБСалют Тогда
			НазваниеГруппы = "КБ Салют";
		ИначеЕсли ЭтотОбъект.ТипПодразделения = Перечисления.ТипПодразделения.РКЗ Тогда
			НазваниеГруппы = "РКЗ";
		ИначеЕсли ЭтотОбъект.ТипПодразделения = Перечисления.ТипПодразделения.ГоловнойОфис Тогда
			НазваниеГруппы = "Головной офис";
		КонецЕсли;
		
		// Ищем существующую группу
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Подразделения.Ссылка
			|ИЗ
			|	Справочник.Подразделения КАК Подразделения
			|ГДЕ
			|	ВРег(Подразделения.Наименование) = ВРег(&Наименование)
			|	И Подразделения.ЭтоГруппа
			|	И НЕ Подразделения.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Наименование", НазваниеГруппы);
		Результат = Запрос.Выполнить();
		
		Сообщить("Поиск группы: " + НазваниеГруппы); // Отладочный вывод
		Если Результат.Пустой() Тогда
			Сообщить("Группа """ + НазваниеГруппы + """ не найдена! Убедитесь, что группа существует.");
			Отказ = Истина;
			Возврат;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЭтотОбъект.Родитель = Выборка.Ссылка;
			Сообщить("Установлен родитель: " + ЭтотОбъект.Родитель); // Отладочный вывод
		КонецЕсли;
	КонецЕсли;
	
	// Проверка уникальности наименования в пределах родителя
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Наименование = &Наименование
		|	И Подразделения.Родитель = &Родитель
		|	И Подразделения.Ссылка <> &ТекущаяСсылка
		|	И НЕ Подразделения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", ЭтотОбъект.Наименование);
	Запрос.УстановитьПараметр("Родитель", ЭтотОбъект.Родитель);
	Запрос.УстановитьПараметр("ТекущаяСсылка", ЭтотОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Сообщить("Подразделение с наименованием """ + ЭтотОбъект.Наименование + """ уже существует в текущей группе!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Автоматическое заполнение кода, если он пустой
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Код) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Подразделения.Код
			|ИЗ
			|	Справочник.Подразделения КАК Подразделения
			|ГДЕ
			|	НЕ Подразделения.ПометкаУдаления";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		МаксКод = 0;
		Пока Выборка.Следующий() Цикл
			// Пытаемся преобразовать код в число, игнорируя некорректные значения
			Попытка
				ТекКод = Число(Выборка.Код);
				МаксКод = Макс(МаксКод, ТекКод);
			Исключение
				// Игнорируем некорректные значения
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
		ЭтотОбъект.Код = Формат(МаксКод + 1, "ЧЦ=9; ЧВН=; ЧГ=0");
		
	КонецЕсли;
	
	// Проверка уникальности кода
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Код = &Код
		|	И Подразделения.Ссылка <> &ТекущаяСсылка
		|	И НЕ Подразделения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", ЭтотОбъект.Код);
	Запрос.УстановитьПараметр("ТекущаяСсылка", ЭтотОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Сообщить("Подразделение с кодом """ + ЭтотОбъект.Код + """ уже существует!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    // Диагностическое логирование для определения состояния документа 
    ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Диагностика", 
    УровеньЖурналаРегистрации.Информация, Метаданные.Документы.РегистрацияИнцидента, 
    Ссылка, "Проверка состояния: ЭтоНовый() = " + ЭтоНовый() + ", Ссылка.Пустая() = " + Ссылка.Пустая());
    
    // Проверка, является ли документ новым
    Если Не ЭтоНовый() Тогда
        Сообщить("Изменение существующего инцидента запрещено!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Попытка изменения существующего инцидента");
        Отказ = Истина;
        Возврат;
    КонецЕсли;  
КонецПроцедуры	

Процедура ПриЗаписи(Отказ)
    // Проверка обязательности заполнения пропуска
    Если Не ЗначениеЗаполнено(Пропуск) Тогда
        Сообщить("Не указан пропуск, связанный с инцидентом!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Не заполнен пропуск");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка обязательности заполнения ответственного
    Если Не ЗначениеЗаполнено(Ответственный) Тогда
        Сообщить("Не указан ответственный за инцидент!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Не заполнен ответственный");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка типа пропуска
    Если ТипЗнч(Пропуск) <> Тип("ДокументСсылка.ВыдачаПропуска") И ТипЗнч(Пропуск) <> Тип("ДокументСсылка.ВыдачаПропускаНаТС") Тогда
        Сообщить("Указан неверный тип пропуска! Допустимые типы: ВыдачаПропуска или ВыдачаПропускаНаТС.");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Неверный тип пропуска: " + ТипЗнч(Пропуск));
        Отказ = Истина;
        Возврат;
    КонецЕсли;  

    // Проверка обязательности заполнения точки контроля
    Если Не ЗначениеЗаполнено(ТочкаКонтроля) Тогда
        Сообщить("Не указана точка контроля!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Не заполнена точка контроля");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка соответствия точки контроля пропуску
    ЗапросТочкаКонтроля = Новый Запрос;
    Если ТипЗнч(Пропуск) = Тип("ДокументСсылка.ВыдачаПропуска") Тогда
        ЗапросТочкаКонтроля.Текст =
        "ВЫБРАТЬ
        |    ВыдачаПропуска.ТочкаКонтроля
        |ИЗ
        |    Документ.ВыдачаПропуска КАК ВыдачаПропуска
        |ГДЕ
        |    ВыдачаПропуска.Ссылка = &Пропуск";
    ИначеЕсли ТипЗнч(Пропуск) = Тип("ДокументСсылка.ВыдачаПропускаНаТС") Тогда
        ЗапросТочкаКонтроля.Текст =
        "ВЫБРАТЬ
        |    ВыдачаПропускаНаТС.ТочкаКонтроля
        |ИЗ
        |    Документ.ВыдачаПропускаНаТС КАК ВыдачаПропускаНаТС
        |ГДЕ
        |    ВыдачаПропускаНаТС.Ссылка = &Пропуск";
    КонецЕсли;
    ЗапросТочкаКонтроля.УстановитьПараметр("Пропуск", Пропуск);
    Результат = ЗапросТочкаКонтроля.Выполнить();
    Если Результат.Пустой() Тогда
        Сообщить("Не удалось определить точку контроля из пропуска!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Пропуск не найден для проверки точки контроля");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    Выборка = Результат.Выбрать();
    Выборка.Следующий();
    Если Выборка.ТочкаКонтроля <> ТочкаКонтроля Тогда
        Сообщить("Указанная точка контроля не соответствует точке контроля в пропуске!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Несоответствие точки контроля пропуску");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка соответствия физического лица и транспортного средства пропуску
    Если ТипЗнч(Пропуск) = Тип("ДокументСсылка.ВыдачаПропуска") Тогда
        ЗапросПропуск = Новый Запрос;
        ЗапросПропуск.Текст =
        "ВЫБРАТЬ
        |    ВыдачаПропуска.ФизическоеЛицо
        |ИЗ
        |    Документ.ВыдачаПропуска КАК ВыдачаПропуска
        |ГДЕ
        |    ВыдачаПропуска.Ссылка = &Пропуск";
        ЗапросПропуск.УстановитьПараметр("Пропуск", Пропуск);
        Результат = ЗапросПропуск.Выполнить();
        Если Результат.Пустой() Тогда
            Сообщить("Пропуск не найден!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Пропуск не найден");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
            Сообщить("Не указано физическое лицо!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Не заполнено физическое лицо");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        Если Выборка.ФизическоеЛицо <> ФизическоеЛицо Тогда
            Сообщить("Физическое лицо в документе не соответствует физическому лицу в пропуске!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Несоответствие физического лица пропуску");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    ИначеЕсли ТипЗнч(Пропуск) = Тип("ДокументСсылка.ВыдачаПропускаНаТС") Тогда
        ЗапросПропуск = Новый Запрос;
        ЗапросПропуск.Текст =
        "ВЫБРАТЬ
        |    ВыдачаПропускаНаТС.ФизическоеЛицо,
        |    ВыдачаПропускаНаТС.ТранспортноеСредство
        |ИЗ
        |    Документ.ВыдачаПропускаНаТС КАК ВыдачаПропускаНаТС
        |ГДЕ
        |    ВыдачаПропускаНаТС.Ссылка = &Пропуск";
        ЗапросПропуск.УстановитьПараметр("Пропуск", Пропуск);
        Результат = ЗапросПропуск.Выполнить();
        Если Результат.Пустой() Тогда
            Сообщить("Пропуск на ТС не найден!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Пропуск на ТС не найден");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
            Сообщить("Не указано физическое лицо!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Не заполнено физическое лицо");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        Если Выборка.ФизическоеЛицо <> ФизическоеЛицо Тогда
            Сообщить("Физическое лицо в документе не соответствует физическому лицу в пропуске!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Несоответствие физического лица пропуску");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        Если ЗначениеЗаполнено(ТранспортноеСредство) И Выборка.ТранспортноеСредство <> ТранспортноеСредство Тогда
            Сообщить("Транспортное средство в документе не соответствует транспортному средству в пропуске!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Запись", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Несоответствие транспортного средства пропуску");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
    Движения.Инциденты.Записывать = Истина;

    // Проверка обязательных полей
    Если Не ЗначениеЗаполнено(ФизическоеЛицо) Или Не ЗначениеЗаполнено(ТочкаКонтроля) Тогда
        Сообщить("Не указано физическое лицо или точка контроля!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Не заполнены обязательные поля: ФизическоеЛицо или ТочкаКонтроля");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка даты инцидента
    Если Не ЗначениеЗаполнено(ДатаИнцидента) Тогда
        Сообщить("Не указана дата инцидента!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Не заполнена дата инцидента");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    Если ДатаИнцидента > ТекущаяДата() Тогда
        Сообщить("Дата инцидента не может быть в будущем!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Дата инцидента (" + Формат(ДатаИнцидента, "ДФ='dd.MM.yyyy HH:mm'") + ") в будущем");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка пропуска
    Если Не ЗначениеЗаполнено(Пропуск) Тогда
        Сообщить("Не указан пропуск, связанный с инцидентом!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Не заполнен пропуск");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если ТипЗнч(Пропуск) <> Тип("ДокументСсылка.ВыдачаПропуска") И ТипЗнч(Пропуск) <> Тип("ДокументСсылка.ВыдачаПропускаНаТС") Тогда
        Сообщить("Указан неверный тип пропуска! Допустимые типы: ВыдачаПропуска или ВыдачаПропускаНаТС.");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Неверный тип пропуска: " + ТипЗнч(Пропуск));
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка соответствия физического лица или транспортного средства пропуску
    Если ТипЗнч(Пропуск) = Тип("ДокументСсылка.ВыдачаПропуска") Тогда
        ЗапросПропуск = Новый Запрос;
        ЗапросПропуск.Текст =
        "ВЫБРАТЬ
        |    ВыдачаПропуска.ФизическоеЛицо
        |ИЗ
        |    Документ.ВыдачаПропуска КАК ВыдачаПропуска
        |ГДЕ
        |    ВыдачаПропуска.Ссылка = &Пропуск";
        ЗапросПропуск.УстановитьПараметр("Пропуск", Пропуск);
        Результат = ЗапросПропуск.Выполнить();
        Если Результат.Пустой() Тогда
            Сообщить("Пропуск не найден!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Пропуск не найден");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Если Выборка.ФизическоеЛицо <> ФизическоеЛицо Тогда
            Сообщить("Физическое лицо в документе не соответствует физическому лицу в пропуске!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Несоответствие физического лица пропуску");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    ИначеЕсли ТипЗнч(Пропуск) = Тип("ДокументСсылка.ВыдачаПропускаНаТС") Тогда
        ЗапросПропуск = Новый Запрос;
        ЗапросПропуск.Текст =
        "ВЫБРАТЬ
        |    ВыдачаПропускаНаТС.ФизическоеЛицо,
        |    ВыдачаПропускаНаТС.ТранспортноеСредство
        |ИЗ
        |    Документ.ВыдачаПропускаНаТС КАК ВыдачаПропускаНаТС
        |ГДЕ
        |    ВыдачаПропускаНаТС.Ссылка = &Пропуск";
        ЗапросПропуск.УстановитьПараметр("Пропуск", Пропуск);
        Результат = ЗапросПропуск.Выполнить();
        Если Результат.Пустой() Тогда
            Сообщить("Пропуск на ТС не найден!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Пропуск на ТС не найден");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Если Выборка.ФизическоеЛицо <> ФизическоеЛицо Тогда
            Сообщить("Физическое лицо в документе не соответствует физическому лицу в пропуске!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Несоответствие физического лица пропуску");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
        Если ЗначениеЗаполнено(ТранспортноеСредство) И Выборка.ТранспортноеСредство <> ТранспортноеСредство Тогда
            Сообщить("Транспортное средство в документе не соответствует транспортному средству в пропуске!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Несоответствие транспортного средства пропуску");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    КонецЕсли;

    // Проверка серьезности инцидента
    ЗначениеПоУмолчаню = Константы.ЗначениеПоУмолчанюСерьезностиИнцидента.Получить();
    Если ЗначениеПоУмолчаню < 0 Или ЗначениеПоУмолчаню > 999 Тогда
        Сообщить("Недопустимое значение константы ЗначениеПоУмолчанюСерьезностиИнцидента: " + ЗначениеПоУмолчаню + ". Используется 100.");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Недопустимое значение константы: " + ЗначениеПоУмолчаню);
        ЗначениеПоУмолчаню = 100;
    КонецЕсли;

    Если ЗначениеЗаполнено(СерьезностьИнцидента) Тогда
        Если СерьезностьИнцидента < 0 Или СерьезностьИнцидента > 999 Тогда
            Сообщить("Серьезность инцидента должна быть в диапазоне от 0 до 999!");
            ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Недопустимое значение СерьезностьИнцидента: " + СерьезностьИнцидента);
            Отказ = Истина;
            Возврат;
        Иначе
            Сообщить("Серьезность инцидента классифицирована как " + ПолучитьУровеньСерьезности(СерьезностьИнцидента) + ".");
        КонецЕсли;
    Иначе
        Сообщить("Серьезность инцидента не указана, используется значение по умолчанию " + ПолучитьУровеньСерьезности(ЗначениеПоУмолчаню) + ".");
    КонецЕсли;

    // Проверка уникальности по пропуску
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ ПЕРВЫЕ 1 Период
    |ИЗ РегистрНакопления.Инциденты
    |ГДЕ Пропуск = &Пропуск
    |   И Регистратор <> &ТекущийДокумент";
    Запрос.УстановитьПараметр("Пропуск", Пропуск);
    Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
    Если НЕ Запрос.Выполнить().Пустой() Тогда
        Сообщить("Инцидент для данного пропуска уже зарегистрирован!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Дублирующий инцидент для пропуска " + Пропуск);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка уникальности с учетом времени
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ ПЕРВЫЕ 1 Период
    |ИЗ РегистрНакопления.Инциденты
    |ГДЕ ФизическоеЛицо = &ФизическоеЛицо
    |   И ТочкаКонтроля = &ТочкаКонтроля
    |   И ДатаИнцидента МЕЖДУ &НачалоПериода И &КонецПериода
    |   И Регистратор <> &ТекущийДокумент
    |   И ДатаИнцидента ЕСТЬ НЕ NULL";
    Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
    Запрос.УстановитьПараметр("ТочкаКонтроля", ТочкаКонтроля);
    Запрос.УстановитьПараметр("НачалоПериода", НачалоМинуты(ДатаИнцидента) - 60); // -1 минута
    Запрос.УстановитьПараметр("КонецПериода", КонецМинуты(ДатаИнцидента) + 60);  // +1 минута
    Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
    Если НЕ Запрос.Выполнить().Пустой() Тогда
        Сообщить("Инцидент для " + ФизическоеЛицо + " в точке " + ТочкаКонтроля + " уже зарегистрирован на эту дату и время!");
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Дублирующий инцидент для " + ФизическоеЛицо + " в " + ТочкаКонтроля);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Формирование движения в транзакции
    НачатьТранзакцию();
    Попытка
        Движение = Движения.Инциденты.Добавить();
        Движение.Период = ДатаИнцидента;
        Движение.ФизическоеЛицо = ФизическоеЛицо;
        Движение.ТранспортноеСредство = ТранспортноеСредство;
        Движение.ТочкаКонтроля = ТочкаКонтроля;
        Движение.СерьезностьИнцидента = ?(ЗначениеЗаполнено(СерьезностьИнцидента), СерьезностьИнцидента, ЗначениеПоУмолчаню);
        Движение.Описание = Описание;
        Движение.Ответственный = Ответственный;
        Движение.ДатаИнцидента = ДатаИнцидента;
        Движение.Пропуск = Пропуск;

        // Логирование в журнал
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.РегистрацияИнцидента, Ссылка,
            "Зарегистрирован инцидент для " + ФизическоеЛицо + " в " + ТочкаКонтроля + " на " + Формат(ДатаИнцидента, "ДФ='dd.MM.yyyy HH:mm'") +
            ", серьезность: " + ПолучитьУровеньСерьезности(Движение.СерьезностьИнцидента));

        Движения.Инциденты.Записать();
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        Сообщить("Ошибка при регистрации инцидента: " + ОписаниеОшибки());
        ЗаписьЖурналаРегистрации("РегистрацияИнцидента.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.РегистрацияИнцидента, Ссылка, "Ошибка проведения: " + ОписаниеОшибки());
        Отказ = Истина;
    КонецПопытки;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.Инциденты.Записывать = Истина;
    Движения.Инциденты.Очистить();

    // Логирование удаления
    ЗаписьЖурналаРегистрации("РегистрацияИнцидента", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.РегистрацияИнцидента, Ссылка,
        "Удалено проведение инцидента для " + ФизическоеЛицо + " в " + ТочкаКонтроля + " на " + Формат(ДатаИнцидента, "ДФ='dd.MM.yyyy HH:mm'"));
КонецПроцедуры

// Вспомогательная функция для получения уровня серьезности в формате SEV-X
Функция ПолучитьУровеньСерьезности(СерьезностьИнцидента)
    Если СерьезностьИнцидента >= 800 Тогда
        Возврат "SEV-1";
    ИначеЕсли СерьезностьИнцидента >= 500 Тогда
        Возврат "SEV-2";
    ИначеЕсли СерьезностьИнцидента >= 100 Тогда
        Возврат "SEV-3";
    Иначе
        Возврат "SEV-4";
    КонецЕсли;
КонецФункции
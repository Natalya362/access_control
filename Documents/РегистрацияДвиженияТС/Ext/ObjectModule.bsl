Процедура ОбработкаПроведения(Отказ, Режим)
    // Проверка заполнения обязательных полей
    Если НЕ ЗначениеЗаполнено(ДатаВремя) Тогда
        Сообщить("Не указана дата и время движения!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(ТипДвиженияТС) Тогда
        Сообщить("Не указан тип движения!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(Пропуск) Тогда
        Сообщить("Не указан пропуск!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(Посетитель) Тогда
        Сообщить("Не указан посетитель!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(ТранспортноеСредство) Тогда
        Сообщить("Не указано транспортное средство!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(ТочкаКонтроля) Тогда
        Сообщить("Не указана точка контроля!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Инициализация движений
    Движения.ДвиженияТС.Записывать = Истина;

    // Проверяем, что пропуск действующий
    СтатусВыдан = Справочники.СтатусыПропусков.НайтиПоНаименованию("Выдан", Истина);
    Если ТипЗнч(Пропуск) <> Тип("ДокументСсылка.ВыдачаПропускаНаТС") Тогда
        Сообщить("Пропуск должен быть типа 'ВыдачаПропускаНаТС'!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Пропуск.Статус <> СтатусВыдан Тогда
        Сообщить("Пропуск " + Пропуск + " имеет статус " + Пропуск.Статус + ", ожидается 'Выдан'!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Пропуск.ДатаОкончания < НачалоДня(Дата) Тогда
        Сообщить("Пропуск " + Пропуск + " истёк срок действия!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Пропуск.ТранспортноеСредство <> ТранспортноеСредство Тогда
        Сообщить("Транспортное средство " + ТранспортноеСредство + " не соответствует пропуску " + Пропуск + "!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Пропуск.ЗонаДоступа <> ЗонаДоступа Тогда
        Сообщить("Зона доступа " + ЗонаДоступа + " не соответствует зоне пропуска " + Пропуск.ЗонаДоступа + "!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка уникальности движения по регистратору и дате
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1 Период
    |ИЗ РегистрНакопления.ДвиженияТС
    |ГДЕ Регистратор = &Регистратор
    |    И НАЧАЛОПЕРИОДА(Период, ДЕНЬ) = &Период";
    Запрос.УстановитьПараметр("Регистратор", Ссылка);
    Запрос.УстановитьПараметр("Период", НачалоДня(Дата));

    Если НЕ Запрос.Выполнить().Пустой() Тогда
        Сообщить("Для документа " + Ссылка + " уже зарегистрировано движение на дату " + Формат(НачалоДня(Дата), "ДЛФ=Д") + "! Повторное создание запрещено.");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка уникальности движения по пропуску, дате и типу движения
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1 Период
    |ИЗ РегистрНакопления.ДвиженияТС
    |ГДЕ Пропуск = &Пропуск
    |    И НАЧАЛОПЕРИОДА(Период, ДЕНЬ) = &Период
    |    И ТипДвиженияТС = &ТипДвиженияТС
    |    И Регистратор <> &Регистратор";
    Запрос.УстановитьПараметр("Пропуск", Пропуск);
    Запрос.УстановитьПараметр("Период", НачалоДня(Дата));
    Запрос.УстановитьПараметр("ТипДвиженияТС", ТипДвиженияТС);
    Запрос.УстановитьПараметр("Регистратор", Ссылка);

    Если НЕ Запрос.Выполнить().Пустой() Тогда
        Сообщить("Для пропуска " + Пропуск + " уже зарегистрировано движение типа '" + ТипДвиженияТС + "' на дату " + Формат(НачалоДня(Дата), "ДЛФ=Д") + "! Повторное проведение запрещено.");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Расчет длительности посещения
    ДлительностьПосещения = 0;
    Если ТипДвиженияТС = Перечисления.ТипыДвиженияТС.Выезд Тогда
        // Находим последнее движение "Въезд" для этого пропуска и точки контроля
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ МАКСИМУМ(ДатаВремя) КАК ПоследнийВъезд
        |ИЗ РегистрНакопления.ДвиженияТС
        |ГДЕ Пропуск = &Пропуск
        |    И ТочкаКонтроля = &ТочкаКонтроля
        |    И ТипДвиженияТС = &ТипВъезд
        |    И ДатаВремя <= &ДатаВремя
        |    И Регистратор <> &Регистратор";
        Запрос.УстановитьПараметр("Пропуск", Пропуск);
        Запрос.УстановитьПараметр("ТочкаКонтроля", ТочкаКонтроля);
        Запрос.УстановитьПараметр("ТипВъезд", Перечисления.ТипыДвиженияТС.Въезд);
        Запрос.УстановитьПараметр("ДатаВремя", ДатаВремя);
        Запрос.УстановитьПараметр("Регистратор", Ссылка);
        Выборка = Запрос.Выполнить().Выбрать();
        Если Выборка.Следующий() И Выборка.ПоследнийВъезд <> Null Тогда
            // Расчет длительности на основе полной даты и времени
            ДлительностьПосещения = (ДатаВремя - Выборка.ПоследнийВъезд) / 60; // В минутах
            Если ДлительностьПосещения < 0 Тогда
                Сообщить("Дата и время выезда не могут быть меньше даты и времени въезда!");
                Отказ = Истина;
                Возврат;
            КонецЕсли;
        Иначе
            Сообщить("Для пропуска " + Пропуск + " не найден предыдущий въезд через точку контроля " + ТочкаКонтроля + "!");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    КонецЕсли;

    // Формируем движение
    Движение = Движения.ДвиженияТС.Добавить();
    Движение.Период = НачалоДня(Дата); 
	Движение.ДатаВремя = ДатаВремя; 
	Движение.Посетитель = Посетитель;
    Движение.ТранспортноеСредство = ТранспортноеСредство;
    Движение.ЗонаДоступа = ЗонаДоступа;
    Движение.ТочкаКонтроля = ТочкаКонтроля;
    Движение.ТипДвиженияТС = ТипДвиженияТС;
    Движение.ДлительностьПосещения = ДлительностьПосещения;
    Движение.Пропуск = Пропуск;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ДвиженияТС.Записывать = Истина;
    Движения.ДвиженияТС.Очистить();
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
    Если НЕ ЗначениеЗаполнено(ДатаВремя) Тогда
        Сообщить("Дата и время движения должны быть заполнены!");
        Отказ = Истина;
    КонецЕсли;
КонецПроцедуры
Процедура ПриЗаписи(Отказ)
    // Запуск бизнес-процесса, если статус "Новая" и документ проведён
    Если Проведен И СтатусЗаявки = Перечисления.СтатусыЗаявки.Новая И Не Отказ Тогда
        НачатьТранзакцию();
        Попытка
            НачатьБизнесПроцессСогласования(Ссылка);
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
            ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.ПриЗаписи", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Ошибка запуска бизнес-процесса: " + ОписаниеОшибки());
            Отказ = Истина;
        КонецПопытки;
    КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтоНовый() Или Не ЗначениеЗаполнено(СтатусЗаявки) Тогда
        СтатусЗаявки = Перечисления.СтатусыЗаявки.Новая;
    КонецЕсли;

    // Проверка обязательных полей перед записью
    Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
        Сообщить("Ошибка: Не заполнено поле Физическое лицо!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ПричиныПосещения) Тогда
        Сообщить("Ошибка: Не заполнено поле Причина посещения!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ЗонаДоступа) Тогда
        Сообщить("Ошибка: Не заполнено поле Зона доступа!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТочкаКонтроля) Тогда
        Сообщить("Ошибка: Не заполнено поле Точка контроля!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТипПропуска) Тогда
        Сообщить("Ошибка: Не заполнено поле Тип пропуска!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка обязательных ссылок на пометку удаления
    Если ЗначениеЗаполнено(Инициатор) Тогда
        Если Инициатор.ПометкаУдаления Тогда
            ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.ПередЗаписью", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.ЗаявкаНаПропуск, Ссылка,
                "Инициатор " + Инициатор + " помечен на удаление!");
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        // Приоритет на Отдел
        Если ЗначениеЗаполнено(Инициатор.Отдел) Тогда
            Подразделение = Инициатор.Отдел;
        ИначеЕсли ЗначениеЗаполнено(Инициатор.Подразделение) Тогда
            Подразделение = Инициатор.Подразделение;
        Иначе
            Подразделение = Справочники.Подразделения.ПустаяСсылка();
        КонецЕсли;

        // Установка признака РежимноеПомещение
        Если ЗначениеЗаполнено(Подразделение) Тогда
            ТипПомещения = Подразделение.ТипПомещения;
            РежимноеПомещение = (ТипПомещения = Перечисления.ТипПомещения.Режимное);
        Иначе
            РежимноеПомещение = Ложь;
        КонецЕсли;
    Иначе
        Подразделение = Справочники.Подразделения.ПустаяСсылка();
        РежимноеПомещение = Ложь;
    КонецЕсли;

    // Установка времени документа
    Если ЭтоНовый() Тогда
        УстановитьВремя(РежимАвтоВремя.НеИспользовать);
        ДатаВыдачи = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Проверка обязательных полей до начала транзакции
    Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Не заполнено поле ФизическоеЛицо!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ПричиныПосещения) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Не заполнено поле ПричиныПосещения!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ЗонаДоступа) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Не заполнено поле ЗонаДоступа!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТочкаКонтроля) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Не заполнено поле ТочкаКонтроля!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТипПропуска) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Не заполнено поле ТипПропуска!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(Инициатор) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Не заполнено поле Инициатор!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Не указан срок действия заявки!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка срока действия
    СообщениеОбОшибке = "";
    Если Не ОбщиеПроверкиПропусков.СрокДействияКорректен(ДатаВыдачи, ДатаОкончания, СообщениеОбОшибке) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, СообщениеОбОшибке);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка уникальности движения
    ПараметрыПроверки = Новый Структура;
    ПараметрыПроверки.Вставить("ФизическоеЛицо", ФизическоеЛицо);
    ПараметрыПроверки.Вставить("Инициатор", Инициатор);
    ПараметрыПроверки.Вставить("Период", ДатаВыдачи);
    Если Не ОбщиеПроверкиПропусков.ДвижениеУникально("ДвиженияПропусков", ПараметрыПроверки, СообщениеОбОшибке) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.Проведение", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, СообщениеОбОшибке);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Формирование движений
    Движения.ДвиженияПропусков.Записывать = Истина;  

    Движение = Движения.ДвиженияПропусков.Добавить();
    Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    Движение.Период = Дата;
    Движение.Пропуск = Ссылка;
    Движение.ФизическоеЛицо = ФизическоеЛицо;
    Движение.ТочкаКонтроля = ТочкаКонтроля;
    Движение.ТипПропуска = ТипПропуска;
    Движение.ЗонаДоступа = ЗонаДоступа;
    Движение.СрокДействия = ДатаОкончания;
    Движение.Причина = ПричиныПосещения;
    Движение.Инициатор = Инициатор;
    Движение.СтатусЗаявки = СтатусЗаявки;
    Движение.ДатаОкончания = ДатаОкончания;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	НачатьТранзакцию();
    Попытка
        Движения.ДвиженияПропусков.Записывать = Истина;
        Движения.ДвиженияПропусков.Очистить();
        Движения.ДвиженияПропусков.Записать();

        // Удаляем очистку регистра сведений ИсторияСтатусовПропусков, так как он удаляется
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.ОбработкаУдаленияПроведения", УровеньЖурналаРегистрации.Информация,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Движения очищены.");
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.ОбработкаУдаленияПроведения", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, Ссылка, "Ошибка удаления проведения: " + ОписаниеОшибки());
        Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьБизнесПроцессСогласования(ЗаявкаСсылка)
    НачатьТранзакцию();
    Попытка
        Если Не ЗначениеЗаполнено(ЗаявкаСсылка) Тогда
            ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.БизнесПроцесс", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.ЗаявкаНаПропуск, ЗаявкаСсылка, "ЗаявкаСсылка не заполнена.");
            ОтменитьТранзакцию();
            Возврат;
        КонецЕсли;

        // Проверка существования активного бизнес-процесса
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
        |ИЗ БизнесПроцесс.СогласованиеЗаявки
        |ГДЕ Заявка = &Заявка
        |    И НЕ ПометкаУдаления
        |    И НЕ Завершен";
        Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
        Если Не Запрос.Выполнить().Пустой() Тогда
            ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.БизнесПроцесс", УровеньЖурналаРегистрации.Информация,
                Метаданные.Документы.ЗаявкаНаПропуск, ЗаявкаСсылка, "Бизнес-процесс для заявки №" + ЗаявкаСсылка.Номер + " уже запущен.");
            ОтменитьТранзакцию();
            Возврат;
        КонецЕсли;

        // Создание и запуск бизнес-процесса
        БизнесПроцесс = БизнесПроцессы.СогласованиеЗаявки.СоздатьБизнесПроцесс();
        БизнесПроцесс.Дата = ТекущаяДатаСеанса();
        БизнесПроцесс.Заявка = ЗаявкаСсылка;
        БизнесПроцесс.Инициатор = ?(ЗначениеЗаполнено(Инициатор), Инициатор, Справочники.Пользователи.ПустаяСсылка());
        БизнесПроцесс.Статус = "В процессе";
        БизнесПроцесс.Записать();
        БизнесПроцесс.Старт();

        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.БизнесПроцесс", УровеньЖурналаРегистрации.Информация,
            Метаданные.Документы.ЗаявкаНаПропуск, ЗаявкаСсылка, "Запущен бизнес-процесс для заявки №" + ЗаявкаСсылка.Номер);
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        ЗаписьЖурналаРегистрации("ЗаявкаНаПропуск.БизнесПроцесс", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаПропуск, ЗаявкаСсылка, "Ошибка запуска: " + ОписаниеОшибки());
        ВызватьИсключение;
    КонецПопытки;
КонецПроцедуры
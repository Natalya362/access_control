Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    // Проверка, является ли документ новым
    Если Не ЭтоНовый() Тогда
        // Проверяем, является ли основанием документ "НазначениеЗоныДоступа"
        Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НазначениеЗоныДоступа") Тогда
            // Разрешаем изменение, если основание - НазначениеЗоныДоступа
            ЗаписьЖурналаРегистрации("ВыдачаПропуска.Запись", УровеньЖурналаРегистрации.Информация,
                Метаданные.Документы.ВыдачаПропуска, Ссылка, "Изменение документа разрешено, так как основание - НазначениеЗоныДоступа");
        Иначе
            Сообщить("Изменение существующего документа Выдача пропуска запрещено!");
            ЗаписьЖурналаРегистрации("ВыдачаПропуска.Запись", УровеньЖурналаРегистрации.Ошибка,
                Метаданные.Документы.ВыдачаПропуска, Ссылка, "Попытка изменения существующего документа");
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    КонецЕсли;

    // Установка времени документа
    Если ЭтоНовый() Тогда
        УстановитьВремя(РежимАвтоВремя.НеИспользовать);
        Дата = ТекущаяДатаСеанса();
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
    Если Не ЗначениеЗаполнено(Заявка) Тогда
        Сообщить("Не указана заявка!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ДатаВыдачи) Тогда
        Сообщить("Не указана дата выдачи пропуска!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
        Сообщить("Не указан срок действия пропуска!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    СообщениеОбОшибке = "";
    Если Не ОбщиеПроверкиПропусков.СрокДействияКорректен(Дата, ДатаОкончания, СообщениеОбОшибке) Тогда
        Сообщить(СообщениеОбОшибке);
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1 
        |    ЗаявкаНаПропуск.ФизическоеЛицо,
        |    ЗаявкаНаПропуск.ПричиныПосещения,
        |    ЗаявкаНаПропуск.ТочкаКонтроля,
        |    ЗаявкаНаПропуск.ЗонаДоступа,
        |    ЗаявкаНаПропуск.ТипПропуска
        |ИЗ
        |    Документ.ЗаявкаНаПропуск КАК ЗаявкаНаПропуск
        |ГДЕ
        |    ЗаявкаНаПропуск.Ссылка = &Заявка
        |    И НЕ ЗаявкаНаПропуск.ПометкаУдаления";
    Запрос.УстановитьПараметр("Заявка", Заявка);
    Результат = Запрос.Выполнить();
    Если Результат.Пустой() Тогда
        Сообщить("Заявка не найдена или помечена на удаление!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Выборка = Результат.Выбрать();
    Выборка.Следующий();
    
    // Проверка соответствия данных из заявки
    Если Выборка.ФизическоеЛицо <> ФизическоеЛицо Тогда
        Сообщить("Указанное физическое лицо не соответствует заявке!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Выборка.ПричиныПосещения <> ПричиныПосещения Тогда
        Сообщить("Указанная причина посещения не соответствует заявке!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Выборка.ТочкаКонтроля <> ТочкаКонтроля Тогда
        Сообщить("Указанная точка контроля не соответствует заявке!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Выборка.ЗонаДоступа <> ЗонаДоступа Тогда
        Сообщить("Указанная зона доступа не соответствует заявке!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Выборка.ТипПропуска <> ТипПропуска Тогда
        Сообщить("Указанный тип пропуска не соответствует заявке!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    // Проверка, что дата окончания больше даты выдачи
    Если НачалоДня(ДатаОкончания) <= НачалоДня(ДатаВыдачи) Тогда
        Сообщить("Дата окончания должна быть больше даты выдачи!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    // Рассчитываем количество дней действия
    КоличествоДнейДействия = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаВыдачи)) / 86400;
    
    Движения.ДвиженияПропусков.Записывать = Истина;
    Движение = Движения.ДвиженияПропусков.Добавить();
    Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    Движение.Период = Дата;
    Движение.Пропуск = Ссылка;
    Движение.ФизическоеЛицо = ФизическоеЛицо;
    Движение.КоличествоДнейДействия = КоличествоДнейДействия;
    Движение.ТипПропуска = ТипПропуска;
    Движение.ЗонаДоступа = ЗонаДоступа;
    Движение.ДатаОкончания = ДатаВыдачи;
    Движение.СрокДействия = ДатаОкончания;
    Движение.Причина = ПричиныПосещения;
    Движение.ТочкаКонтроля = ТочкаКонтроля;
    Движение.Инициатор = Инициатор;
    Движение.СтатусЗаявки = Перечисления.СтатусыЗаявки.ВыдачаПропуска;
    
    // Запись в регистр сведений ИсторияСтатусовПропусков
    СтатусВыдан = Справочники.СтатусыПропусков.НайтиПоНаименованию("Выдан", Истина);
    Если НЕ ЗначениеЗаполнено(СтатусВыдан) Тогда
        Сообщить("Статус 'Выдан' не найден в справочнике СтатусыПропусков!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    ДвижениеИстории = РегистрыСведений.ИсторияСтатусовПропусков.СоздатьНаборЗаписей();
    ДвижениеИстории.Отбор.Пропуск.Установить(Ссылка);
    ДвижениеИстории.Отбор.Период.Установить(Дата);
    ЗаписьИстории = ДвижениеИстории.Добавить();
    ЗаписьИстории.Пропуск = Ссылка;
    ЗаписьИстории.Период = Дата;
    ЗаписьИстории.Статус = СтатусВыдан;
    ЗаписьИстории.ДатаНачала = ДатаВыдачи;
    ЗаписьИстории.ДатаОкончания = ДатаОкончания;
    ЗаписьИстории.Ответственный = Инициатор; // Устанавливаем ответственного
    ЗаписьИстории.ДокументОснование = Ссылка;
    ДвижениеИстории.Записать();

КонецПроцедуры   

Процедура ОбработкаУдаленияПроведения(Отказ)   
	
    Движения.ДвиженияПропусков.Записывать = Истина;
    Движения.ДвиженияПропусков.Очистить();
    
    ДвижениеИстории = РегистрыСведений.ИсторияСтатусовПропусков.СоздатьНаборЗаписей();
    ДвижениеИстории.Отбор.Пропуск.Установить(Ссылка);
    ДвижениеИстории.Отбор.Период.Установить(Дата);
    ДвижениеИстории.Записать();   
	
КонецПроцедуры

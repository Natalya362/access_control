Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    // Устанавливаем статус "Новая" для новых документов или если статус не заполнен
    Если ЭтоНовый() Или Не ЗначениеЗаполнено(СтатусЗаявки) Тогда
        СтатусЗаявки = Перечисления.СтатусыЗаявки.Новая;
    КонецЕсли;

    // Проверка обязательных полей перед записью
    Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
        Сообщить("Ошибка: Не заполнено поле Физическое лицо!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ПричинаПосещения) Тогда
        Сообщить("Ошибка: Не заполнено поле Причина посещения!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ЗонаДоступа) Тогда
        Сообщить("Ошибка: Не заполнено поле Зона доступа!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТочкаКонтроля) Тогда
        Сообщить("Ошибка: Не заполнено поле Точка контроля!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТипПропуска) Тогда
        Сообщить("Ошибка: Не заполнено поле Тип пропуска!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТранспортноеСредство) Тогда
        Сообщить("Ошибка: Не заполнено поле Транспортное средство!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка обязательных ссылок на пометку удаления
    Если ЗначениеЗаполнено(Инициатор) Тогда
        Если Инициатор.ПометкаУдаления Тогда
            ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.ПередЗаписью", УровеньЖурналаРегистрации.Ошибка, 
                Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка,
                "Инициатор " + Инициатор + " помечен на удаление!");
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        // Приоритет на Отдел
        Если ЗначениеЗаполнено(Инициатор.Отдел) Тогда
            Подразделение = Инициатор.Отдел;
        ИначеЕсли ЗначениеЗаполнено(Инициатор.Подразделение) Тогда
            Подразделение = Инициатор.Подразделение;
        Иначе
            Подразделение = Справочники.Подразделения.ПустаяСсылка();
        КонецЕсли;

        // Установка признака РежимноеПомещение
        Если ЗначениеЗаполнено(Подразделение) Тогда
            ТипПомещения = Подразделение.ТипПомещения;
            РежимноеПомещение = (ТипПомещения = Перечисления.ТипПомещения.Режимное);
        Иначе
            РежимноеПомещение = Ложь;
        КонецЕсли;
    Иначе
        Подразделение = Справочники.Подразделения.ПустаяСсылка();
        РежимноеПомещение = Ложь;
    КонецЕсли;

    Если ЗначениеЗаполнено(ТранспортноеСредство) И ТранспортноеСредство.ПометкаУдаления Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.ПередЗаписью", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка,
            "ТранспортноеСредство " + ТранспортноеСредство + " помечено на удаление!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если ЗначениеЗаполнено(ФизическоеЛицо) И ФизическоеЛицо.ПометкаУдаления Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.ПередЗаписью", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка,
            "ФизическоеЛицо " + ФизическоеЛицо + " помечено на удаление!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Установка времени документа
    Если ЭтоНовый() Тогда
        УстановитьВремя(РежимАвтоВремя.НеИспользовать);
        Дата = ТекущаяДатаСеанса();
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
    // Запуск бизнес-процесса, если статус "Новая" и документ проведён
    Если Проведен И СтатусЗаявки = Перечисления.СтатусыЗаявки.Новая И Не Отказ Тогда
        НачатьТранзакцию();
        Попытка
            НачатьБизнесПроцессСогласования(Ссылка);
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
            ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.ПриЗаписи", УровеньЖурналаРегистрации.Ошибка, 
                Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Ошибка запуска бизнес-процесса: " + ОписаниеОшибки());
            Отказ = Истина;
        КонецПопытки;
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Проверка обязательных полей
    Если Не ЗначениеЗаполнено(ТранспортноеСредство) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Не заполнено поле ТранспортноеСредство!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Не заполнено поле ФизическоеЛицо!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ПричинаПосещения) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Не заполнено поле ПричинаПосещения!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ЗонаДоступа) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Не заполнено поле ЗонаДоступа!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТочкаКонтроля) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Не заполнено поле ТочкаКонтроля!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТипПропуска) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Не заполнено поле ТипПропуска!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(Инициатор) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Не заполнено поле Инициатор!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Не указан срок действия заявки!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка срока действия
    СообщениеОбОшибке = "";
    Если Не ОбщиеПроверкиПропусков.СрокДействияКорректен(Дата, ДатаОкончания, СообщениеОбОшибке) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, СообщениеОбОшибке);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка уникальности движения
    ПараметрыПроверки = Новый Структура;
    ПараметрыПроверки.Вставить("ТранспортноеСредство", ТранспортноеСредство);
    ПараметрыПроверки.Вставить("Период", Дата);
    Если Не ОбщиеПроверкиПропусков.ДвижениеУникально("ДвиженияПропусков", ПараметрыПроверки, СообщениеОбОшибке) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, СообщениеОбОшибке);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Формирование движений
    НачатьТранзакцию();
    Попытка
        Движения.ДвиженияПропусков.Записывать = Истина;
        Движение = Движения.ДвиженияПропусков.Добавить();
        Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
        Движение.Период = Дата;
        Движение.Пропуск = Ссылка;
        Движение.ФизическоеЛицо = ФизическоеЛицо;
        Движение.ТранспортноеСредство = ТранспортноеСредство; 
        Движение.ТочкаКонтроля = ТочкаКонтроля;
        Движение.ЗонаДоступа = ЗонаДоступа;
        Движение.СрокДействия = ДатаОкончания;
        Движение.Причина = ПричинаПосещения;
        Движение.Инициатор = Инициатор; 
        Движение.ТипПропуска = ТипПропуска;
        Движение.СтатусЗаявки = СтатусЗаявки;
        Движение.ДатаОкончания = ДатаОкончания;

        // Удаляем запись в регистр сведений ИсторияСтатусовПропусков, так как он удаляется
        // Код для записи в ИсторияСтатусовПропусков удалён

        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.Проведение", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Ошибка проведения: " + ОписаниеОшибки());
        Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	НачатьТранзакцию();
    Попытка
        Движения.ДвиженияПропусков.Записывать = Истина;
        Движения.ДвиженияПропусков.Очистить();
        Движения.ДвиженияПропусков.Записать();

        // Удаляем очистку регистра сведений ИсторияСтатусовПропусков, так как он удаляется
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.ОбработкаУдаленияПроведения", УровеньЖурналаРегистрации.Информация,
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Движения очищены.");
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.ОбработкаУдаленияПроведения", УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЗаявкаНаВъездТС, Ссылка, "Ошибка удаления проведения: " + ОписаниеОшибки());
        Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура НачатьБизнесПроцессСогласования(ЗаявкаСсылка)
    Если Не ЗначениеЗаполнено(ЗаявкаСсылка) Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.БизнесПроцесс", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, ЗаявкаСсылка, "ЗаявкаСсылка не заполнена.");
        Возврат;
    КонецЕсли;

    // Проверка существования активного бизнес-процесса
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
    |ИЗ БизнесПроцесс.СогласованиеЗаявки
    |ГДЕ Заявка = &Заявка
    |    И НЕ ПометкаУдаления
    |    И НЕ Завершен";
    Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
    Если Не Запрос.Выполнить().Пустой() Тогда
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.БизнесПроцесс", УровеньЖурналаРегистрации.Информация, 
            Метаданные.Документы.ЗаявкаНаВъездТС, ЗаявкаСсылка, "Бизнес-процесс для заявки №" + ЗаявкаСсылка.Номер + " уже запущен.");
        Возврат;
    КонецЕсли;

    // Создание и запуск бизнес-процесса
    Попытка
        БизнесПроцесс = БизнесПроцессы.СогласованиеЗаявки.СоздатьБизнесПроцесс();
        БизнесПроцесс.Дата = ТекущаяДатаСеанса();
        БизнесПроцесс.Заявка = ЗаявкаСсылка;
        БизнесПроцесс.Инициатор = ?(ЗначениеЗаполнено(Инициатор), Инициатор, Справочники.Пользователи.ПустаяСсылка());
        БизнесПроцесс.Статус = "В процессе";
        БизнесПроцесс.Записать();
        БизнесПроцесс.Старт();

        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.БизнесПроцесс", УровеньЖурналаРегистрации.Информация, 
            Метаданные.Документы.ЗаявкаНаВъездТС, ЗаявкаСсылка, "Запущен бизнес-процесс для заявки №" + ЗаявкаСсылка.Номер);
    Исключение
        ЗаписьЖурналаРегистрации("ЗаявкаНаВъездТС.БизнесПроцесс", УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.ЗаявкаНаВъездТС, ЗаявкаСсылка, "Ошибка запуска: " + ОписаниеОшибки());
        ВызватьИсключение;
    КонецПопытки;
КонецПроцедуры
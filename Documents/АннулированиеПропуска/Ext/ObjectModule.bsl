Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Установка времени документа
    Если ЭтоНовый() Тогда
        УстановитьВремя(РежимАвтоВремя.НеИспользовать);
        Дата = ТекущаяДатаСеанса();
    КонецЕсли;
    
    Если Дата > ТекущаяДатаСеанса() Тогда
        Сообщить("Дата аннулирования не может быть в будущем!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(Пропуск) Тогда
        Сообщить("Поле Пропуск не заполнено!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(Инициатор) Тогда
        Сообщить("Поле Ответственный не заполнено!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
    Движения.ДвиженияПропусков.Записывать = Истина;
    
    СообщениеОбОшибке = "";
    Если Не ОбщиеПроверкиПропусков.ПропускНеАннулирован(Пропуск, Ссылка, СообщениеОбОшибке) Тогда
        Сообщить(СообщениеОбОшибке);
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если Не ОбщиеПроверкиПропусков.ПропускДействителен(Пропуск, Дата, СообщениеОбОшибке) Тогда
        Сообщить(СообщениеОбОшибке);
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Движение = Движения.ДвиженияПропусков.Добавить();
    Движение.ВидДвижения = ВидДвиженияНакопления.Расход; // Аннулирование - это списание
    Движение.Период = Дата;
    Движение.Пропуск = Пропуск;
    Движение.ФизическоеЛицо = ФизическоеЛицо;
    Движение.Инициатор = Инициатор;
    Движение.КоличествоДнейДействия = 0;
    
    НачатьТранзакцию();
    Попытка
        ПропускОбъект = Пропуск.ПолучитьОбъект();
        Если ПропускОбъект = Неопределено Тогда
            ВызватьИсключение "Пропуск не найден!";
        КонецЕсли;
        
        СтатусАннулирован = Справочники.СтатусыПропусков.НайтиПоНаименованию("Аннулирован", Истина);
        Если НЕ ЗначениеЗаполнено(СтатусАннулирован) Тогда
            ВызватьИсключение "Статус 'Аннулирован' не найден в справочнике СтатусыПропусков!";
        КонецЕсли;
        
        ПропускОбъект.Заблокировать();
        ПропускОбъект.Статус = СтатусАннулирован;
        ПропускОбъект.Записать();
        
        // Запись в регистр сведений ИсторияСтатусовПропусков
        ДвижениеИстории = РегистрыСведений.ИсторияСтатусовПропусков.СоздатьНаборЗаписей();
        ДвижениеИстории.Отбор.Пропуск.Установить(Пропуск);
        ДвижениеИстории.Отбор.Период.Установить(Дата);
        ЗаписьИстории = ДвижениеИстории.Добавить();
        ЗаписьИстории.Пропуск = Пропуск;
        ЗаписьИстории.Период = Дата;
        ЗаписьИстории.Статус = СтатусАннулирован;
        ЗаписьИстории.ДатаНачала = Дата; // Дата начала - дата аннулирования
        ЗаписьИстории.ДатаОкончания = Дата; // Дата окончания - дата аннулирования
        ЗаписьИстории.Ответственный = Инициатор; // Устанавливаем ответственного
        ЗаписьИстории.ДокументОснование = Ссылка;
        ДвижениеИстории.Записать();
        
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        Сообщить("Ошибка при аннулировании пропуска: " + ОписаниеОшибки());
        Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Движения.ДвиженияПропусков.Записывать = Истина;
    Движения.ДвиженияПропусков.Очистить();
    
    СтатусВыдан = Справочники.СтатусыПропусков.НайтиПоНаименованию("Выдан", Истина);
    Если НЕ ЗначениеЗаполнено(СтатусВыдан) Тогда
        Сообщить("Статус 'Выдан' не найден в справочнике СтатусыПропусков!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    НачатьТранзакцию();
    Попытка
        ПропускОбъект = Пропуск.ПолучитьОбъект();
        Если ПропускОбъект <> Неопределено И ПропускОбъект.ДатаОкончания >= ТекущаяДатаСеанса() Тогда
            ПропускОбъект.Заблокировать();
            ПропускОбъект.Статус = СтатусВыдан;
            ПропускОбъект.Записать();
            
            // Запись в регистр сведений ИсторияСтатусовПропусков
            ДвижениеИстории = РегистрыСведений.ИсторияСтатусовПропусков.СоздатьНаборЗаписей();
            ДвижениеИстории.Отбор.Пропуск.Установить(Пропуск);
            ДвижениеИстории.Отбор.Период.Установить(Дата);
            ЗаписьИстории = ДвижениеИстории.Добавить();
            ЗаписьИстории.Пропуск = Пропуск;
            ЗаписьИстории.Период = Дата;
            ЗаписьИстории.Статус = СтатусВыдан;
            ЗаписьИстории.ДатаНачала = ПропускОбъект.ДатаВыдачи; // Восстанавливаем дату начала
            ЗаписьИстории.ДатаОкончания = ПропускОбъект.ДатаОкончания; // Восстанавливаем дату окончания
            ЗаписьИстории.Ответственный = Инициатор;
            ЗаписьИстории.ДокументОснование = Ссылка;
            ЗаписьИстории.Комментарий = "Восстановление статуса после отмены проведения: " + Комментарий;
            ДвижениеИстории.Записать();
        КонецЕсли;
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        Сообщить("Ошибка при восстановлении статуса: " + ОписаниеОшибки());
        Отказ = Истина;
	КонецПопытки;

КонецПроцедуры